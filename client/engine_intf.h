// Autogenerated file: do not modify

typedef struct {
	int		struc_size;
	cvar_t*	(*_Cvar_Get) (const char *name, const char *value, int flags);
	void	(*_Cvar_GetVars) (const cvarInfo_t *vars, int count);
	cvar_t*	(*_Cvar_Set) (const char *name, const char *value);
	cvar_t*	(*_Cvar_SetValue) (const char *name, float value);
	cvar_t*	(*_Cvar_SetInteger) (const char *name, int value);
	char*	(*_Cvar_VariableString) (const char *name);
	float	(*_Cvar_VariableValue) (const char *name);
	int	(*_Cvar_VariableInt) (const char *name);
	float	(*_Cvar_Clamp) (cvar_t *cvar, float low, float high);
	void	(*_Com_Printf) (const char *str, ...);
	void	(*_Com_DPrintf) (const char *str, ...);
	void	(*_Com_WPrintf) (const char *str, ...);
	bool	(*_FS_FileExists) (const char *filename);
	TList<CStringItem>	(*_FS_ListFiles) (const char *name, int flags);
	void*	(*_FS_LoadFile) (const char *name, unsigned *size);
	void	(*_FS_FreeFile) (void *buf);
	char*	(*_FS_Gamedir) (void);
	void	(*_FS_CreatePath) (const char *path);
	void	(*_FS_CopyFile) (const char *src, const char *dst);
	void	(*_FS_CopyFiles) (const char *srcMask, const char *dstDir);
	void	(*_FS_RemoveFiles) (const char *mask);
	void	(*_Vid_Restart) (void);
	bool	(*_Vid_GetModeInfo) (int *width, int *height, int mode);
	int	(*_ImageExists) (const char *name, int stop_mask);
	void	(*_LoadPCX) (const char *name, byte **pic, byte **palette, int *width, int *height);
	void	(*_LoadTGA) (const char *name, byte **pic, int *width, int *height);
	void	(*_LoadJPG) (const char *name, byte **pic, int *width, int *height);
	bool	(*_WriteTGA) (const char *name, byte *pic, int width, int height);
	bool	(*_WriteJPG) (const char *name, byte *pic, int width, int height, bool highQuality);
	bspfile_t*	(*_LoadBspFile) (const char *filename, bool clientload, unsigned *checksum);
	void	(*_CM_BoxTrace) (trace_t *tr, const vec3_t start, const vec3_t end, const vec3_t mins, const vec3_t maxs, int headnode, int brushmask);
	void	(*_CM_TransformedBoxTrace) (trace_t *tr, const vec3_t start, const vec3_t end, const vec3_t mins, const vec3_t maxs, int headnode, int brushmask, const vec3_t origin, const vec3_t angles);
	void	(*_CM_TransformedBoxTrace2) (trace_t *tr, const vec3_t start, const vec3_t end, const vec3_t mins, const vec3_t maxs, int headnode, int brushmask, const vec3_t origin, const vec3_t *axis);
	int	(*_CM_BrushTrace) (const vec3_t start, const vec3_t end, int *brushes, int maxBrushes);
	int	(*_CM_RefineBrushTrace) (const vec3_t start, const vec3_t end, int *brushes, int numBrushes);
#ifdef _WIN32
	void*	(*_Vid_CreateWindow) (int width, int height, bool fullscreen);
	void	(*_Vid_DestroyWindow) (bool force);
#endif
} refImport_t;

#ifndef DYNAMIC_REF
#include "engine.h"
#else // DYNAMIC_REF

extern refImport_t ri;

inline cvar_t* Cvar_Get (const char *name, const char *value, int flags)
{
	return ri._Cvar_Get (name, value, flags);
}
inline void Cvar_GetVars (const cvarInfo_t *vars, int count)
{
	ri._Cvar_GetVars (vars, count);
}
inline cvar_t* Cvar_Set (const char *name, const char *value)
{
	return ri._Cvar_Set (name, value);
}
inline cvar_t* Cvar_SetValue (const char *name, float value)
{
	return ri._Cvar_SetValue (name, value);
}
inline cvar_t* Cvar_SetInteger (const char *name, int value)
{
	return ri._Cvar_SetInteger (name, value);
}
inline char* Cvar_VariableString (const char *name)
{
	return ri._Cvar_VariableString (name);
}
inline float Cvar_VariableValue (const char *name)
{
	return ri._Cvar_VariableValue (name);
}
inline int Cvar_VariableInt (const char *name)
{
	return ri._Cvar_VariableInt (name);
}
inline float Cvar_Clamp (cvar_t *cvar, float low, float high)
{
	return ri._Cvar_Clamp (cvar, low, high);
}
#define Com_Printf	ri._Com_Printf
#define Com_DPrintf	ri._Com_DPrintf
#define Com_WPrintf	ri._Com_WPrintf
inline bool FS_FileExists (const char *filename)
{
	return ri._FS_FileExists (filename);
}
inline TList<CStringItem> FS_ListFiles (const char *name, int flags)
{
	return ri._FS_ListFiles (name, flags);
}
inline void* FS_LoadFile (const char *name, unsigned *size = NULL)
{
	return ri._FS_LoadFile (name, size);
}
inline void FS_FreeFile (void *buf)
{
	ri._FS_FreeFile (buf);
}
inline char* FS_Gamedir (void)
{
	return ri._FS_Gamedir ();
}
inline void FS_CreatePath (const char *path)
{
	ri._FS_CreatePath (path);
}
inline void FS_CopyFile (const char *src, const char *dst)
{
	ri._FS_CopyFile (src, dst);
}
inline void FS_CopyFiles (const char *srcMask, const char *dstDir)
{
	ri._FS_CopyFiles (srcMask, dstDir);
}
inline void FS_RemoveFiles (const char *mask)
{
	ri._FS_RemoveFiles (mask);
}
inline void Vid_Restart (void)
{
	ri._Vid_Restart ();
}
inline bool Vid_GetModeInfo (int *width, int *height, int mode)
{
	return ri._Vid_GetModeInfo (width, height, mode);
}
inline int ImageExists (const char *name, int stop_mask = IMAGE_ANY)
{
	return ri._ImageExists (name, stop_mask);
}
inline void LoadPCX (const char *name, byte **pic, byte **palette, int *width, int *height)
{
	ri._LoadPCX (name, pic, palette, width, height);
}
inline void LoadTGA (const char *name, byte **pic, int *width, int *height)
{
	ri._LoadTGA (name, pic, width, height);
}
inline void LoadJPG (const char *name, byte **pic, int *width, int *height)
{
	ri._LoadJPG (name, pic, width, height);
}
inline bool WriteTGA (const char *name, byte *pic, int width, int height)
{
	return ri._WriteTGA (name, pic, width, height);
}
inline bool WriteJPG (const char *name, byte *pic, int width, int height, bool highQuality)
{
	return ri._WriteJPG (name, pic, width, height, highQuality);
}
inline bspfile_t* LoadBspFile (const char *filename, bool clientload, unsigned *checksum)
{
	return ri._LoadBspFile (filename, clientload, checksum);
}
inline void CM_BoxTrace (trace_t *tr, const vec3_t start, const vec3_t end, const vec3_t mins, const vec3_t maxs, int headnode, int brushmask)
{
	ri._CM_BoxTrace (tr, start, end, mins, maxs, headnode, brushmask);
}
inline void CM_TransformedBoxTrace (trace_t *tr, const vec3_t start, const vec3_t end, const vec3_t mins, const vec3_t maxs, int headnode, int brushmask, const vec3_t origin, const vec3_t angles)
{
	ri._CM_TransformedBoxTrace (tr, start, end, mins, maxs, headnode, brushmask, origin, angles);
}
inline void CM_TransformedBoxTrace2 (trace_t *tr, const vec3_t start, const vec3_t end, const vec3_t mins, const vec3_t maxs, int headnode, int brushmask, const vec3_t origin, const vec3_t *axis)
{
	ri._CM_TransformedBoxTrace2 (tr, start, end, mins, maxs, headnode, brushmask, origin, axis);
}
inline int CM_BrushTrace (const vec3_t start, const vec3_t end, int *brushes, int maxBrushes)
{
	return ri._CM_BrushTrace (start, end, brushes, maxBrushes);
}
inline int CM_RefineBrushTrace (const vec3_t start, const vec3_t end, int *brushes, int numBrushes)
{
	return ri._CM_RefineBrushTrace (start, end, brushes, numBrushes);
}
#ifdef _WIN32
inline void* Vid_CreateWindow (int width, int height, bool fullscreen)
{
	return ri._Vid_CreateWindow (width, height, fullscreen);
}
inline void Vid_DestroyWindow (bool force)
{
	ri._Vid_DestroyWindow (force);
}
#endif

#endif // DYNAMIC_REF

