FAST TODO:
~~~~~~~~~~
1) 2x for vertex lighting (optimized lightmaps)
  AND for general vertex lighting (see (2))
2) RGBGEN_VERTEX: when 2x available - use it (only when gl_vertexLight==0 !)
  -- check all places, when VERTEX->EXACT_VERTEX
3) ? overbright for coronas (color *= 2) -- center will be white
  (at least, try it !)
4) try to use gl_ent.origin instead of gl_ent.center for lighting when out-of-world
  (may fix black dead bodies, black gun, zaero/lox positron explosion ...)
- saturation: should saturate (or apply gl_lightmap==2) dynamicLightmap->source[] -- this will automatically saturate slow lightstyles
  and vertex lights, but will require additional memory (currently: dl->source[] is a pointer to loaded bspfile)
  - current bug: map "base1" - starting room have 3+ "slow" lightstyles, which will produce incorrect lightmaps with saturation != 1
  - when will be implemented, check all SaturateColor... in gl_lightmap.c (at least, remove from vertex lighting)
  - saturate lightmap textures with tables (see gl_image.c::LightScaleTexture()) - separate TableSaturate() (name?) function in
    gl_images.c (may be, move to gl_math.c)
? alias for [NV|EXT]_texture_rectangle: ARB_texture_rectangle (OpenGL 2.0)

-------------------------------------------------------------------------------
	new lightgrid:
-------------------------------------------------------------------------------
properties:
~~~~~~~~~~~
  - ability to cache all lightstyles (smoother shadow volumes for ALL lights); attention to correctly handle changes in style 0
  - nearby lights and strong lights should be stored implicitly (attention to surf_light: is it needed to specify, which
    point on surface is nearest, with ability to trace)
  ! should be useful when hardware lights will be implemented
entity system:
~~~~~~~~~~~~~~
  - ability to cache entity lighting between frames
  - ability to use light, computed for different entity (for example, player's light -> weapon model)
    (BUT: do not use light values/directions -- use visibility info only ?!)
implementation:
~~~~~~~~~~~~~~~
  1) gather all lights, potentially affected point (do not trace, but cull with distance/PVS)
  2) sort them by effect on point (may be, separately sort by quadrants -- use direction-to-light signbits)
  3) enumerate light list(s), trace to light (if surf light -- may be, few times), accumulate light
  4) when gathered enough light, stop enumeration (cull by significance)
  5) save to cache few most significant lights + ambient (use bit flag: sun_ambient, minlight) + less significant
     lights combinet by 6 axes and grouped by lightstyles
  6) light pointers can be stored in a form of 16-bit index (requires array of map lights)
  7) can check adjancent cache cells for same data (non-significant part can be checked with some error), and set pointer
     for current cell to good adjancent
using:
~~~~~~
  - give 8 cells; skip out-of-world cells
  - interpolate:
    1) precomputed light axes (convert grid axis to entity axis) -- most error will be here
    2) sun_ambient
    3) stored lights (weight for each light per 8 cells: 0.25 -- in 1 cell, 1.0 -- in all cells; use weights + fractional part of
       position in lightgrid for using lights with some weights)
  - add glowing, dlights
filling grid:
~~~~~~~~~~~~~
  - save entity lighting between frames
  - compute 1 from 8 cells per frame; use old light until all computed; when computed -- lerp during few frames to a value from grid
  - check entity moving speed: if new position is completely not intersected with cells from previous frame, and new position have
    incomplete (or not computed at all) cells:
    a) compute light for entity (not for grid)
    b) compute light for nearest cell, asign it to entity, and complete cells starting from next frame
  - can compute few cells per frame, when this computation is not too complex (gather stats while computation: num_traces,
    may be -- num point lights, num surf lights, etc.; use this stats for CPU usage control: when too much required, use blended prev.
    frame lights, can sort entities for lighting with size/distance criterion -- nearest have better quality)
  - can precompute cells for spawnpoints (add renderer exported function for this); compute NxNxN cells (not just 2x2x2)
determine/evaluate:
~~~~~~~~~~~~~~~~~~~
  - how much lights to store implicitly (1 light axis == 6*3 == 18b == 9 lights !)
  - wich error allow for adjancent cell matching (than more error, than more compact will be filled grid)
cell format:
~~~~~~~~~~~~
  - flags:
    - use_ambient (sky visible from cell point)
  - counts:
    - numLights  -- number of stored lights
    - numStyles  -- number of stored precomputed lights for grid axis
  - pointers to lights (numLights, can be 0 ?)
  - light axis (numStyles, can be 0, when map is dark and lighted with small point lights)
-------------------------------------------------------------------------------

- dlights:
  1. allow more than 32 dlights (on client, not renderer)
  2. cull dlights before processing in renderer: 1) frustum, 2) BSP
  3. refine to 32 with relevancy (intens/dist)
  - add static dlights: color, fade speed, origin, type (for relevancy culling)
  ? combine few nearby dlights into a single one (3 -> 2 etc; sometimes have 2 dlights with same origin !)

- image/shader manager:
  ? easily can reuse autogenerated shader (2D - 1 stage, 3D - 2 stages, no gens/mods)
  ! images: add ALPHA(r=g=b=0,a)|LUMINANCE(r=g=b,a=255)==1|LUMINANCE_ALPHA(r=g=b,a)==2 format
    NOTE: ALPHA - rgb ignored in all TexEnv functions
  - dither 32->16 bit (when r_textureBits==16); dither mipmaps
  ? POSSIBLE BUG (feauture): Q3 uses alpha for specular lighting; check for problems with alpha-special Resample/MipMap

! add gl_depthBits: without it 32-bit mode works with 16-bit depth buffer; when depthbits = 0 - use 24-bit for 32-bit color (as in Q3)

lighting bugs:
  - map "ktdm1", {64,0,144} - teleporter model is too black (lightgrid bugs); same bug with "q2dm1"
  - "winter": too dark inside shadows (and: inside caverns should be "area lights" (check arghrad tutorial for understanding ...))
  - "beachassault": too dark inside ship (needs add surflights near pointlight -- or change pointlight equation -- 'linear+const/dist')
  - weapon model can get light from inside wall (should use vieworg instead of ent.origin for lighting
    -OR- perform trace to detect nearest non-inside-wall grid point)
  - "bigspacegunup": (-305,183,14) (inside tower, upper floor, under ceil lamp) - too dark model lighting (double-side surf light ?)

- lighting:
  !? try vertex light on water
  ? minlight
  - R_LightPoint
  ? subdivide large surface lights (or trace additional points) when computing light (really, more complex task ...)
  ? weapon model for 3rd person entities: use light from main entity (compute 1 point instead of 2 -- ~2x speedup)
  - do not trace model->light when both placed in the same leaf: leafs are convex, so - no way to occlude by bsp object
    (may be, do not trace, when in the same CLUSTER ?)
  - movable inline model lighting (disabled now):
     ? incorrect intensity ("actcity2" - rotating gate) -- may be, for frame models too
     - make it with entity script only -- lightmaps by default (or reject by size)
     - should make envmaps work
     - dlights should be applied in a usual for lightmaps way (not with vertex light)
     - some models have "_minlight" field (other fields too?)
     - entity may have its own light surfaces (map "skytower" -- lift have SURF_LIGHT)
       (if attach lights to entity, lightgrid should be reimplemented ? or check this lights every time ?)
     ? compute lighting not for point but for box (or for each surface separately ??); may be, with special (not generic)
       function -- without dlights etc (if for each surface -- only 1 vector)
     ? cache lighting when entity in a stopped state (cache will require separate holding of fast lightstyles)
     info: "rc1" escalator looking good
     each_surface: check "teehc2" with crane enabled
  - zaero, demo4, kamikaze: too dark explosion (should get lighting for LARGE objects in a different way)
    same: 1st map, beginning, give EMP grenade, throw (best viewed from 3rd person) -- can be bad lighting
    (can use sphereLighting (FAKK-style) for large models; requires new lightgrid)

- vis bugs: use BoxLeafs() + LeafVis() to get combined vis without checking "near-nontrans-water" (of course, ignore
  non-world invisible leafs) - will fix water vis bug and, may be, some other vis bugs too (map "ground3", "actmet" have some ...)
  - example bugs:
    - map "underrain": have sky brushes (MYST) for cave lighting; when vieworg is inside such brush - only sky painted
      (oldgl: same as non-transparent water, combines 2 clusters vis)
    - "ground" (not #3!): pos=(347,-755,318), dir=(1,0,0) -- vis bug
  - require to perform MarkLeafs() every frame (can replace node.vidFrame and node.frame with a single one); check MarkLeafs() speed --
    may be, speedup this process

- gamma:
  - correct screenshots with contrast/intens (fill gammaTable in GLimp or send this table to SetGamma())
  ? what to do with "intens" param in GLimp_SetGamma() ? remove ??
  - document this cvars
  - move gamma computations to renderer, send computed table to SetGamma() (but with more precition ? WHO WILL COMPUTE TABLE ??)
  - update software gamma code

? cmodel_t:
  - add "void *faces"   - filled/used by renderer (and clean R_LoadSubmodels)
  - add "vec3_t center" - who will fill/update this ? ((mod->mins+mod->maxs)/2+ent->origin)
? remove gl_fog stuff

- color shell: should use size=0.5 for weapons and =3 for main model (use "fromEntity" ?)

- reflections:
  - small bugs when one can see througs another (for example, lift on map "japan"; "ground3") - unstable draw order
    (or not enough vertex buffer size -- in this case, multitexturing for envmaps will help)
  - adjust ALPHAGEN_DOT consts (+ compensate near distances -- too opaque)
  - should add reflections on SURF_ALPHA with minAlpha > 0 (require to check image)
  - map "ground3": invalid reflections on smoke bottom - should not be (used tex with maxAlpha=0; trace tells "solid" -- but different
    texture ?!)
  - try another texture
  - try cvar (temp) for envmap_scale and envmap_alpha_const
  - cvar for disabling envmaps
  - cvar for disabling HQ windows with envmaps (HQ alpha surfaces at all ? (envmaps, alphagen dot etc.))
  - needs to remove extra.plane.axis when shader have deformVertexes

- flares:
  ! autoflares: should combine bsp-divided surfaces onto a single flare (combine by parent brush ?)
  ? correct fov
  ?? flare image have visible square (when its color is saturated) -- not with ATI, check NV (GF5+TNT)
  - implement with GL_NV_occlusion_query (and flare option: off, software, hardware);
    test should be performed after whole 3D world is out from backend

- fog:
  !!! BUGS !!! works incorrect with multi-pass rendering
  ? reading parms from file (model.c)
  - gl_fog cvar
  ? controlling from console
  ? should not be affected by fog (check it!) -- flares
  ! if fogDens > LIMIT -> sky = defaultSky, its color = fogColor

? gl_state:
  - add GL_Color() (do not compare, but save to struc ...)
  - add GL_SaveState() / GL_RestoreState(): copy struc / enum saved + call funcs for saved fields
    (or GL_SaveState(savePtr) / GL_SetState(glState))

Colors:
  ! need to save dlight color before overbright for entity lighting
  ? need to modulate dlight color/alpha (check Q3)
  ! overbright particles (use identityLight) or particle color table
  - saturate particles
  ? saturate beams
  - saturate tbl_8to32 (and make separate color table for color >> overbright ??) -- and do not saturate .pcx and .wal
    textures (faster map loading ?)

PreprocessShader():
  - add GL_DECAL blend: src=SRC_ALPHA, dst=ONE_MINUS_SRC_ALPHA
  - can combine (src_a, 1-src_a)+(1,1)
  ? constRgba/identRgba -> rgbType,alphaType = {compute,const,ident (const=1),vertex,vertexConst(vetrex*const)}
- shaders:
  ? make shader_t.name dynamically allocated (~ basenamed_t)
  ? sky shader: specify color for "gl_fastSky"
  - backend GenerateColors (and other?): for multipass rendering can save "current type of data in buffer" and use it
    later (example: 1st pass - rgbGen_vertex, 2nd - same -- do not update)

- dynamic lightmaps:
  ? option (menu): dynamic lightmap type - uploadable/multipass/auto
  ? when no multitexture - use "multiPassLM = false" (if "auto")
  - many dynamic lightmaps in: market, alley1 (look outside world), rc4 (at start point), punwar (not too slow?), vertigo
    lpbheaven (strong lighting, lots of SURF_TRANS + dl), beachassault (inside ship: shader with 3 lightstyles)

! rename "gl_local.h" to something another (and change "#ifndef __GL_LOCAL_...")
- SHADER_WALL -> SHADER_WORLD (depthwrite, depthtest) or add SHADER_HUD (no write/test)
- add SHADER_SPRITE: alpha/alphatest, depth-write/test, sort=5, rgb/alpha-gen=vertex
? don't need shader->sortParam other than sky/opaque/seethrough (may be, +coronas (already painted after all) +hud (2D ? already separate))
? disable REF_NEWFX when necessary image files absent

! vertex arrays are not 16-byte aligned
? reimplement (remove?) fast drawing

- dlights:
  - cut dlights (by angle: rad/intens = cos(angle)); backlights -- rad/intens can be greater (for culling)
  - speedup of markup process (?):
    1) share planes between surfs
    2) add "dlightMask" for plane
    3) WalkBspTree(): mark plane dlights (no surface dlights)
    4) DrawBspSeq(): give dlight info from planes
    !) need a way to provide dlight info for inline models (static (WORLD) and dynamic models)
  - increase DLIGHT_BITS, store dlightMask instead of numDlights in surface array when ap.numDlights <= DLIGHT_BITS
  - cvar gl_fastDlights (==1 -- current; ==0 -- correct brightness by distance to surface plane);
    correct dlights: DrawScene() should check for dlighted shaders a plane pointer (needs to share planes between coplanar
    surfaces !!) and call Flush() when plane differs; can be optimized: MOST (not all!) shaders can be painted correctly,
    when plane is different, BUT all surfaces have only 1 dlight (different code path for PreprocessShader(): use glColor,
    not glEnvColor); may be, use 1 dlight for different planes and any number of dlights for same plane in a single Flush()
    (hard to implement ?)

Screenshots:
  - on auto-save, when entering "base2", flares appeared (but should be occluded by lift door)

? "gl_fastSky 2" - use "*sky" shader; add color to "*sky" shader (color-filled skies)
? gl_lastValidRenderer (reset all config params ("reset gl_*" if changed ??); example of value -- "Riva TNT2/SSE")

- tesselation (subdivision):
  - map "ground3": bug on broken window (look outside caffe)
  - map "campmc": bug on water (bad tesselation) when tessSize=64,SUBDIV_ERROR=0.1 and SubdividePoly() have
  	if ((*v1)[axis] < value1)	side1 = 1;
  	else if ((*v1)[axis] > value2)	side1 = 2;
  	else				side1 = 3;
     to detect side[1|2] (no error when used "<=" and ">=" instead of "<" and ">")

- Shaders:
  ! should load scripts (scripts/*.shader); replace system shaders with script
  ? may use separate file for each shader (use the same name as texture, but with different extension)
  - shader templates (in scripts/*.shader, use mask instead of shader name; use "map $texture" for image specification)
  - need ability to get shader script from memory (map script with builtin shaders)
  - map $texture     -- map image with the same name as shader name (useful for shader templates)
  - map size <w> <h> -- change image size (for Q2 maps: allows to replace texture without resampling to original size)
  ? map color        -- change color of SURF_LIGHT source (see Q3/FAKK q3map_color etc. -- different name)
  ? implement SHADER_ENVMAP[2]/SHADER_TRANS[33|66] etc. with templates (script, uses "if ... / else ... endif" with analyzing
    shader flags -- whole GL_FindShader() default_shader part as script ?!!)

HW occlusion:
  - model culling: use hw occlusion test (HP or NV), if NV -- can use LOD when model partially visible
  - correctly use with near/far (and side ?) clipplanes (do not try to cull when object is VERY near, it
    can reduce fillrate too ...)
  - sort surfaces (and models) back to front to utilize new hw culling technologies
  - try to use frame-to-frame coherency to reduce number of occlusion queries
  ? for details and other ideas, see GL_NV_occlusion_query spec

QGL system:
  - gl_logFile:
    ? remove "GL_" and "gl" prefixes (to look like OpenGL spec)
    ? add error checking after commands (qgl.in: ERROR)
    - option to compile without logfile capabilities


BUGS:
?* Com_DropError (...) can cause "halt" renderer (will in loop display "red" message without screen update,
  can switch to "oldgl" (to see this messages), but will crush when switch back to "gl" (if StageIterator() ?))
? map "terrain", light cone from helicopter: too opaque when overbright is 1 (invalid lightmap on alpha-surf ?)
? check demo "massive1": have error "frame #46 not found"
- can't use alpha test for SHADER_WALL (dm_duke... have assault/glass texture, which is SURF_ALPHA with alpha < 0.5)
- lightmap optimization bugs: beachassault, rhstation (should use adaptive threshold: depends on light intensity? (0 for dark,
  16 (?) for bright))

--------- Mandatory ------------
VISIBLE:
- models (entities)
  - md2
    - IR-vision fx
    - check all RF_XXX flags from q_shared2.h
- shadows
? inlineModels: RF_TRANSLUCENT: glColor4f (1,1,1,0.25) + blend + no lightmap (vertex light ?)
FOR GAME:
- re.GetClientLight

--------- Improvements -----------

? combine all tcMod's (all but wave) into a single matrix (TCMOD_TRANSFORM)
- optimize sky box drawing:
  ? can tesselate SOME surface as axis-aligned rects (find surf planar mins/maxs) (problems when surf can be placed on few box sides)
    ? find fast cases, when surface placed only on one plane (use surface bounds ?)
- vertex lighting:
  - surface simplification (?) + subdivision (!) for complex lightmaps (non-gradient color change) - as option
    (lighting = "lightmap", "vertex", "hq vertex")
?? make area_t, cluster_t, area.clusterList, cluster.leafList (faster MarkLeafs()/LightPoint())
? make skins for models with 1 frame to be sh.fast==true (and implement it in AGP memory);
  Problem: how to apply lighting (use hw lights)? (and: skins may be dynamically changed from "fast" to "slow")
! triangle models: build lods
? "gl_alphaLightmap" (arc, def: "1") -- can disable lighting of alpha/warp surfaces; add option to menu
  (easy implement, but naming problems ...)
- improve SURF_ALPHA quality on near distances (determine const for checking this requirement?):
  - scale (enlarge) texture with keeping alpha = 0 or 255
  ? adjust alpha-test const for surface in accordance to its average alpha (but: what to do with mipmaps code (it modifies avg alpha))
- screen blending: move this outside renderer, make with DrawFill2 (REF_SOFT: cannot do this, because of paletted implementation)
- fast vid_restart: can reload all (necessary!?) textures/lightmaps (+ update vertex colors); problems:
  - some changes requires vid_restart (GL_Register/GL_Init etc.) -- extensions, overbright etc. -- just check all cvars in gl_main.c
  - should restart shaders: remove unnecessary shaders
- make refEntity_t (rename it!), particle_t, beam_t to be derived from a single structure: { strucType, next, drawNext }, node_t (leaf)
  should have a single pointer to this list, not separate pointers to entities, particles, beams (sprites too ??)
? GL_Cull() --(insert)-> GL_State()
? RGBGEN_SPECULAR (rgb depends on viewer direction and light positions) -- for windows/water
? reflect flares from water/windows (see Raiman3)
- shaders (load-time, Q3 shaders): when texture have no alpha-channel, but alpha-channel used as specular mask, remove specular mask
- support ARB_texture_non_power_of_two (GeForce6+)
