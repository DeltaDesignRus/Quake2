BUGS:
~~~~~
  *? 1st try to start demomap after start, when no d1 alias -- "killserver+menu_main"
  - jumpy demo "tower" (at home, all Q2 versions -- at least from p10) -- low fps on original server computer ?
  - gl_console_only not works with SINGLE_RENDERER (because of static link to functions); NOW: disabled in vid_dll.cpp

- software gamma: should use identityLight corrected by gamma(but: 1**any==1 ?!)/brightness/contrast (not overbright only)
  ? but: sometimes texture modulated by identityLight; separate identityLight and textureIdentityLight ??
    ? may be, only replace 'glBind(NULL)+glColor(color*identityLight)+DrawRect()' (white texture) ->
      'glBind()+glColor(gamma(color)*identityLight)+draw'
    ? may be, bring back white texture support (glBind(NULL) -> glBind("*white"))
! add [auto-]detail for rail
? make InitialSnapPosition() work with Trace() to allow "teleporter grenade" in LOX mod
! check for valid key names for bindings (now: works ':', ';', '+', '=', UNK01, Ctrl+Alt, Alt+Ctrl etc)
- beams are not depth-sorted now! (to sort it, needs to create temp entity!)
- minimize in Win98:
  - check WM_ACTIVATE(bool), WM_SIZE(min) order
  - may be, will fix if WM_SIZE(min) will be handled only when AppActive==false
? cl_3rd_person 2 -- smooth camera; add game option: play with 3rd person camera (ext protocol only ?)
- 3rd person camera trace: can extend Trace() to decect point of contents change
  (do not leave water; current: will not enter water, but can leave it)
- "conchars.pcx": create drop-shadow effect (in pic; may be, require to cut (as grid) + grow image + different drawing code)
  for better reading (require MemBitmap fx code ...)
- crash.log:
  - CVAR_LOG -- add to crash.log on fatal exit (vid_ref,developer,dedicated,version,
     + {game,mapname,deathmatch,cheats,maxclients}==CVAR_SERVERINFO)
  - log OS version, app command line
- intro playing: do not display "loading" for cinematics (wait a little before displaying splash?), + try to parse "nextserver"
  in Demomap_f() to not launch demos (but keep current code just in case); disable "nointro" code in sv_cmds.cpp::SV_DemoMap_f()
  when app command line contains "map"/"demomap" command (and automatically disable intro; change "4.XX_Changes.txt" about this)
  Current: when specify "map", intro will be initialized + immediately server changed to map; when specify "demomap", server
  will be killed as it was called from "d1" alias
! LARGE (STATIC) ARRAYS:
  - cl_particles[] - 240 Kb (4096 particles) -- try to reduce particle_t size (different types -> union) + MAX_PARTICLES=256 (?) -
    - most particle use was from railgun effect, which is gone (almost gone); may be, analyze cl_newFx cvar and dynamically
    allocate array of good size (i.e. make array dynamic)
  - cl_parse_entities - 164 Kb
  * (dynamic) cl_entities[]  - 1024 * ((entityState_t==(41*4))*3+6*4) = 1024 * 516 = 516 Kb
  ! backend: few static arrays [MAX_VERTEXES][MAX_INDEXES][MAX_SCENE_SURFACES]
    ? all gl buffers should be allocated dynamically; may be, vary size from map surface count
- fatal error msgbox: display few latest warnings (if going one by one); may be, display as "advanced info" (checkbox)
  
! new pmove.c errors:
  - "ground3" cafe, on the street: cannot jump onto a corner column (horiz. speed set to 0 due to position snap)
- "paused": incorrect timing (at least, fx will be incorrect after paused=0)
  - should reimplement it in a different way
  - may be, make multiplayer pause (with sync clients to server; make attention to not timeout clients when server is paused)
! make NEW_PROTOCOL_VERSION: send with NEW_PROTOCOL_ID, client warning when client older than server and disabling
  ext protocol for client
? check for hook ability of precicious PMove (more than 1/8) (2 non-spectators cannot be in the same quantized world point;
  every new player will be performed InitialSnapPosition()
  - idea: save non-quantized+quantized positions (+velocity?); next time find non-quantized by quantized (save for few pmove types
    only to avoid 2 ghosts in one quantized place); may be, if few players in one quantized place - ignore detailed info
  - problem: detect out-of-date positions (player was respawned and its position was changed+snapped))
! console: use "SetConsoleCtrlHandler()" to hook exit with "x" or Ctrl-C
! command "banchat": disable chat of concrete IP; implementation variants:
  1) disable "cmd say[_team]" etc. for client (will not disable non-"say" chat, when message typed in console)
  2) disable PRINT_CHAT with text "Player: message"
  3) (best?) hook ge->ClientCommand(from), and disable all PF_cprintf(to,PRINT_CHAT,"...") inside this call, when from!=to
? remove IPX protocol from win32 code (MS-DOS rudiment)
? eliminate BigShort(MASTER|SERVER_PORT) (sv_cmds.c, cl_main.c) -- only one thing, for which BigXxx() is used (big-endian numbers)
! spec for map script
- colorize server list (old/new-only/cheats/full) (make legend ? or make table with some attributes: server-name, map-name, players,
  cheats, protocol (old,both,new))
- sv_extProtocol: "2" - force (no clients without this); if map.type != map_q2 -> force too; if cl_extProtocol=0, but server
  requires it, connect with extProtocol (should add sv_extProtocol to serverinfo + check it on a client side + detect non-q2 maps)
? scoreboard: add blendrect (try to improve look anyway ...)
! prediction errors:
  - zaero, plasma shield (jump + shield in down direction - movement lock when landed on shield);
    original Q2 works incorrect too, but in a different way: can pass through shield
  ! lerp entity angles (may remove bug with locking inside opening door)
? make "r_consoleOnly" work without "vid_restart"
- "client" source dir: split game-related stuff (effects, particles, prediction etc) and sound/console/keyboard/menu into separate
  dirs (choose 2 names from: cgame, client, ui ... etc)
- game/m_flash.c : convert float[][3] -> short[][3]  (2.5 Kb -> 2 times smaller ...)
? effects::dlights: may be, when fading dlight, modulate its color, not intensity -- this will allow to combine few dlights from
  the same position, but with different color, into a single one
- input, sound: check requirement of linking to hWnd; perform as less as possible work for re-activating when cl_hwnd changed
  (Vid_NewWindow() called)

----------------------------------------

! map "trainstation": very slow (10-20ms) server (AMD K6-2+) (slow SV_AreaEdicts(), >800 times/sv_frame)
! unpack PVS in LoadBsp(); use unpacked version in renderer and CM_InPVS() etc.
- option "Screen Flashes" (flash scale ? -- 0 - invisible, 1 - as is)
- compile option: store configs and savegames (and screenshots?) in "ApplicationData", "MyGames" or inside game directory
  ? Linux: "~/Quake2/..." (under user's home directory)
  - this will allow to launch game directly from CD without installation

- if Win32 can't get keyboard focus, "set r_fullscreen 0" (as Unreal2)
BINDS:
  - "bind key action1|onrelease action2" (Unreal-like); current: "bind key +action" == "bind key +action|onrelease -action" only
  - "bind -ask <action>": will display "Press a key or button for this action" MsgBox and wait for user to press key
    (ESC - cancel); when key pressed, <action> will be bound to this key; this may be useful for binding to keys, which names
    are unknown, + for scripts, + general "controls menu" may be reimplemented with this command
  ? bindtmp, aliastmp (not stored in config ?) ("bind [-temp] <key> <action>", "alias ...")
SAVEGAMES:
  - check compatibility with original Q2 savegames
  ? show game time (like Anachronox)
  - quicksave: save to a few (3-4?) slots
  - sort savegames by time, ignore slots; any number of savegames (?)
  ? qcommon.h (engine config): NO_SAVEGAMES - remove save/load game code
  ? gzip file (or pkzip file -- can keep uncompressed only "current" save dir; will require to load/unload savegames.zip for
    displaying savegame menu)
KINGPIN:
  - fire/steam
HALFLIFE:
  // from pm_shader.c
  - step sound: volume = 0.2/0.5 (walk/run) (+ add slowwalk -- crouched)
  - if moving slow - no step sounds
  - walking/running: step sound length = 400/300; water = 600; ladder = 350
HALFLIFE2:
  - measure and display (as number) fillrate (current: 3d display only); + needs to disable fog (for KP etc) !!
  ? check their full-scene fog implementation (for multi-pass rendering)

CAMERA:
  - interpolate camera 1st/3rd person change

TRACE:
  ? speedup ClipToEntities() (client/server/ref_gl):
    - COMPARE only with entities in range (start - trace.endpos) (trace.endpos frequently updated); can sort ents by
      distance (find a list of potentially collided ents, sort by coord and collide + update collision limits with additional
      refining following traces)
      1) sort potentially touchable entities with MIN distance (dist(ent,start)-ent.rad (rad??)): 1st -- nearest
         end=max_dist
      2) loop: if (dist(ent)>end) break; Trace(ent); if (collide) end=dist(ent);
      NOTE: cannot TRACE to (start - trace.endpos) - will produce different trace.frac
      +) add something like ent.worldMatrix in client/server prediction, call BoxTrace() instead of TransformedBoxTrace() when true;
         for alias models: make origin=0,angles=0,box=mins+origin,maxs+origin (make separate "trace" function for this (clip line
         with AABB) ?)
    - test:
      1) compare trace bounds with ent bbox (very fast; like AreaEdicts())
      2) compare ent sphere with trace cylinder  (already implemented ?)
      3) TransformedTrace()  (already ?)
  - speedup detection of "tr.fraction != 1" - stop on 1st collision
  - TransformedBoxTrace: replace (headnode,origin,angles) with entity; make HeadnodeForBox() -> tempEntity;
    cache/update ent.angles->ent.axis ! (in renderer: ClipToEntities() -- use TransformedBoxTrace; send to renderer axis, not angles
    (check how this will affects left-hand weapon model))
  ? try something like AreaEdicts() for client trace code
  ? make blaster/rocket shooting do not clip by sky (game trace: sky brushes -> playerclip, monsterclip, but bullets will go here)
    problems: 1) PointContents() will display CONTENTS_SOLID; 2) after sky contents may go CONTENTS_EMPTY -- another part of map --
    bullets should not leave sky

- console: "nochat" - disable messages from game (engine/developer messages only); may be, display game messages
  in notify area only ? (this will require console extensions, 2nd console etc.)
- improve (speedup) MSG_WriteDir() with tables
- cvar commands: "push", "pop"; 2 variants:
  a) push <var> , pop <var>     -- each cvar have its ovn stack; "push $a;push $b;pop a;pop b" will not change vars
     (needs "save"/"restore" names for commands ("save" is already used) ??)
  b) push <value> , pop <var>   -- global cvar stack; "push a;push b;pop a;pop b" will exchange "a" and "b" values

MODEL SYSTEM:
~~~~~~~~~~~~~
- when no SPECIFIED skin for model, use any (?) other; if no skins - use different (default) model
- scan for models on initialization; check its gender, type (q2,hl,q3 etc.), skin list; create animation system (should convert
  Q2 animation requests to q3 etc)
- needs ability to specify model gender without "models.lst" file (special config file in model dir)
? player setup: add model type/gender filter
? make pmove player bounds to be taken from the actual player model (server option (?), requires extptotocol for
  correct prediction)
? create (compressed ?) model cache (some model loading stages are slow, e.g. normal calculations and skeleton building (if will be
  implemented))
- ability to detect unused models/skins (for unloading from renderer)
- client entity code should work with this_model_system objects, these objects should link to renderer models (move refEntity_t to
  model system); may be, use CBaseEntity -> CRendererEntity, and allocate entities by renderer (frontend) with some basic caps from
  client code (i.e. renderer will allocate and display (and perform some display-relative modifications), but most modifications
  will be performed by client code)


? command for hiding files from pak: "pakhide <pakname> <filemask>" - non-reversive command, changes (be sure non-destructive
  for alpha-sort names) files info so it will not found on next requests
? improve camper detection: track player position every ... 5 sec (??) for a 1+n minute period and set "camper" to true
  if current player position is near (tune this distance !) to history[now-1min .. now-2min]
- menu option: priority (win_priorityBoost) -- for Win2K+

BSP:
~~~~
? KP map scaling (auto) -- needs force extprotocol
? mirrored maps
? commands spmap, devmap etc. (set "cheats" and "deathmatch" vars before SV_Map())
- advanced "map" command syntax: add scaling and mirroring (separate scale each axis, mirror - X *= -1 ?)
  "map [-dev] [-sp] [-mirror] [-scale] <name>" (?!)
? Q1 map support (easier than HL; requires renderer ability to load textures from BSP)

*** BUGS ***
- 3rd person view: ground3_beta3, dist=300, enter dark place (near ladder) between street lamp and garage: garage
  door will disappear (server sends entity list depends on model origin, not vieworg) -- needs protocol extension,
  when client sends its 3rd-person origin too, and server uses BOTH positions for PVS multicast
- script comments stripper: removes '//' and '/* ... */' comments from each line (should remove from script only) AND
  '/*' will work as '//' when no corresponding '*/' (for example, cmd "map /*lightmap1" will work as "map ", but when mapname
  is quoted - works fine) -- do not remove comments from console command line ?

! add materials: glass, grass, sand
? make atmospheric effects (some maps in kingpin and halflife does, Q3F too ...)
  (make surface-dependent raindrop sounds? (KP:main/sound/world/rain*.wav))

------------ MENUS ---------------

- when menu script will be implemented:
  - add developer submenus
- M_DrawTextBox()+M_Print() used only for "please wait" messages; replace with MessageBox-like function

-------- CLIENT/SERVER -----------

- record demos: make .dm2 file to be gzipped (produce with command other than "record"?)
  (may use old command too: who wants to send demo to other players, may just un-gzip it)
? demos with full list of events (already: serverrecord);
  ! make player for this demos (total control over movement: move, chase, eye etc.)
? add support for moving ladders: when player on entity with ladder, move player within entity (example: map "mesto", helicopter)
  (seems, this is game code ...)
? downloading:
  - sv_user.c :: SV_NextDownload_f() -- should limit downloading speed when server is on modem
  - ext protocol:
    - allow downloading of jpg/tga instead of pcx/wal (any suitable image)
    - download paks (when not very large)
    * download map levelshot (current: jpg only, no other file types)
    - download player models/skins at game time (and allow download indicator during game)
  - menu: move "download options" to another place (not "player setup", or to upper level: where model selection performed)
    (separate for server/client)
  - make download options:
    a) to be a bitfield (and make additional options: download paks etc); separate sv and cl download options
    b) remove client-side options, make menu: "file absent - can download" with options: disconnect, download as separate files,
       download as pak (+display pak size; only when in pak and pak name is not "pak%d.pak"), ignore file (not for *.bsp)
  - place downloaded files into "downloads/" dir (check before downloading - may be already downloaded) + link file (or for paks -
    make "loadpak downloads/<name>.pak"
    ? may be, limit this dir by size or file lifetime (work as cache)
? perform extended protocol checking by adding "[cl_]extprotocol" to userinfo
? server with long player names: replace all userinfo names with special names (va("\x01\x02%2d",id) etc.), and when game dll
  will try to display this name somewhere (check all API functions!), replace it with original name
  ! WANRING: check demo recording -- should display correct names (this is client-side, so - safe ?)
? SV_FindIndex() -- use hash tables ?
? server: if game_time is comparable (or greater than ?) with ref_time, need to Sleep(game_time) every frame between game
  frames (smooth FPS)
? CHECK: sv_user.c :: SV_ExecuteUserCmd() ("false")
?? cl_maxfps: can better control max FPS (currently: if non-limited fps is 250 (4ms) and set limit to 200 (5ms), real fps will
  be 125 (8ms) (really, 170 -- not 200!)); improve: move FPS control to CommonFrame(): we can know, how much can Sleep()
  (CHECK: may be, current implementation is correct -- can't get exact maxfps, when fps is large -- 1ms->1000fps, 2ms->500fsp:
  small difference in ms, large in fps)
- server: when loading, ignore timescale (state is always ss_game, but clients are not spawned)

--------- REF_GL (new) -----------

- R_RecursiveWorldNode():
  3) fog-in-leaf
  4) leaf-use-detailTex
- portals:
  - try software clipplane (1. add to frustum; 2. clip triangles)
  - use GetBoxRect(surfBBox) to help computing portal frustum
  - use 'Oblique Frustum Clipping' (NV demos) for free clip plane (aligns near clip plane to user clip plane, this
    will modify Z coord, but allows clipping using 'Z<0')
  - add 2nd {viewcluster, leaf[].frame} set (1st for main scene, 2nd for portal) -- Q3 has recalculation of leaf visibility
    every frame twice, and without portal - once per few frames.
  ? try implement using stencil or render-to-texture
? place LoadMd2 outside ref_xxx and perform lovercase for a skin names
! fog occlusion (for global fog) -- implement it like sky (occluded surface -> sky surface, sky -> fog color);
  may look at Alice (additional clip plane to 4 frustum planes)
- detail textures + magnify filter (i.e. advmame2x -- check its name!) - use file "detail.lst" (?) wich will specify detail+filter
  for Q2 (KP) textures

------------ SOUND ---------------

? make ladder sounds (if it is possible) - depends on ladder surface type (wood creak etc.)

? add hardware mixing (DirectSound), try DirectSound3D (or OpenAL, or own implementation ??)
  Maps with slow sound fx: beachassault (multiple barrel blast)

? fix stereo sound rotation (bad positioning)

- make camper sounds gender-sensitive; change sounds (get it from Thief II), but let old (current)
  system works with "sv_campersounds 2"
? spectator sounds (windy)
? try to move surface bullet sounds from client to server

------------ VIDEO ---------------

- .WAL mipmaps: used in ref_soft only (if recompute, can shrink wal files by 1st mipmap -- reduce size of texture.pak)
  - to recompute: 1. convert 8->32 bit; 2. generate mipmaps (as for TGA/JPG); 3. downsample 32->8 bit
  - may recompute mipmaps only when absent (when present, use from wal file)
  - check: can wal-handling program (wally, qbsp3, qe4 etc) load shrinked images

? h/w gamma: check for valid gamma when read
- CDS:
  - when mode cannot be changed, use current (with fullscreen available); try to enumerate video modes ?
  - add support for "1024x768@70"-like strings (see UT2003 for ideas)

- add marks: bulletholes (?), explosion marks, blood (!), "cheesy shadow" (!), water ripple
- decompress visinfo for client (cmodel); share this with renderer
? support for view-dependent LightForPoint()

-------------- FS ----------------

- add FS_FOpenFileEx(name, mode), where mode is READ/WRITE/OSREAD (no PAK support)/ZWRITE (gzip compression)
? FILE2 -> STREAM, isZipped -> funcRead / funcWrite / funcClose / funcOpen (??)
- inline files: add support for #game/path/filename -- use this file as "path/filename" when "game" loaded

------------ COMMON --------------

? console command line parsing: add special chars (C-like '\"' etc.)
? console: change "]/command" -> "]command" (after completion, may be, other places), but keep
  removing "/" and "\" at line start before parsing; may be, change prompt "]" -> other (">", "#"
  or #define'd string; draw prompt separately -- remove it from input line, i.e. empty line will be
  "" (in memory), not "]")

- make zip.c big-endian compatible
- md4.c::Encode()/Decode() -- works exactly as memcpy() with little-endian platforms, memcpy()+LongSwapBuffer() with big-endian

- create tool for automated Little/Big-endian file format conversion (parse C-headers); can create table:
  num_recs * { rec_offset , num_bytes }  (provide table as resource files for big-endian platforms ?)

----------- GAME LIB -------------

!? add Python virtual machine (game library, inline map scripts)
? loading Win32 mods in Linux (Wine)
? add support for loading ELF (other format?) object files -- cross-platform (any x86 platform), can place object files into paks;
  can implement renderer or gui or anything other as ELF package and place it into pak (ideal: small platform-depending exe with
  support of loading ELF modules)

------------- CVARS --------------

? cvarclear - clear all archive flags from cvars, which was not created with quake2 (created with "set <var> <value> a" command)
?? cvar_mon varname [message]  - monitor cvar on screen (default message = varname)
?? cvar_unmon varname  - stop monitor for cvar
- add flags (or explicit command) for:
  - disconnect (game)
  - vid_restart
  - in_restart
  - check CVAR_LATCH commands
  - check all var->modified fields
  Problems: 1) when var from renderer DLL, associated string or func may point to unloaded DLL memory; 2) var gl_mode etc: when ref_soft
    active, its modified flag should be ignored (both problems - when var registered from module, which currently unloaded)

----------- COMPLETION -----------

? completion cvarnames after "set", "toggle", "add" (etc.) and "...$varname"
  (add flags for Cmd_AddCommand() - complete type: cvar, map, demo ... ???)
  ? add special arg (or value for argv[1]) for command - to get completion type ("maps/*.bsp", "demos/*.dm*", "cvars:*", "bindings:*" ...)
    ? check HL2 - how implemented there
  ? complete savegames too (load/save command)
? make completion "dir"-like formatting + colorizing against char-marks (types)
? add "Cmd_AddHidden()" - for server commands (cannot be completed/listed, but accessible)
  (or just implement with Cmd_AddCommand(), but use name prefix, which will be ignored for seaching, but disables completion)

------------- LINUX --------------

? check all "#pragma pack" places (gcc have ability to compile this)
- update video config menu
- hardware gamma (see /usr/X11R6/bin/xgamma as example ...)
- LoadRefresh: "vid_ref->modified = false" when OK
- net.c: some funcs changed args netadr_t -> *netadr_t
