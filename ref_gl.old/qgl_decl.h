// Autogenerated file: do not modify

typedef void (APIENTRY * dummyFunc_t) (void);

typedef union
{
	struct {
		void	(APIENTRY * AlphaFunc) (GLenum func, GLclampf ref);
		void	(APIENTRY * ArrayElement) (GLint i);
		void	(APIENTRY * Begin) (GLenum mode);
		void	(APIENTRY * BindTexture) (GLenum target, GLuint texture);
		void	(APIENTRY * BlendFunc) (GLenum sfactor, GLenum dfactor);
		void	(APIENTRY * Clear) (GLbitfield mask);
		void	(APIENTRY * ClearColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
		void	(APIENTRY * ClearDepth) (GLclampd depth);
		void	(APIENTRY * Color3f) (GLfloat red, GLfloat green, GLfloat blue);
		void	(APIENTRY * Color3fv) (const GLfloat *v);
		void	(APIENTRY * Color4f) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
		void	(APIENTRY * Color4fv) (const GLfloat *v);
		void	(APIENTRY * Color4ub) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
		void	(APIENTRY * Color4ubv) (const GLubyte *v);
		void	(APIENTRY * ColorPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
		void	(APIENTRY * CullFace) (GLenum mode);
		void	(APIENTRY * DeleteTextures) (GLsizei n, const GLuint *textures);
		void	(APIENTRY * DepthFunc) (GLenum func);
		void	(APIENTRY * DepthMask) (GLboolean flag);
		void	(APIENTRY * DepthRange) (GLclampd zNear, GLclampd zFar);
		void	(APIENTRY * Disable) (GLenum cap);
		void	(APIENTRY * DrawBuffer) (GLenum mode);
		void	(APIENTRY * Enable) (GLenum cap);
		void	(APIENTRY * EnableClientState) (GLenum array);
		void	(APIENTRY * End) (void);
		void	(APIENTRY * Finish) (void);
		void	(APIENTRY * Fogf) (GLenum pname, GLfloat param);
		void	(APIENTRY * Fogfv) (GLenum pname, const GLfloat *params);
		void	(APIENTRY * Frustum) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
		GLenum	(APIENTRY * GetError) (void);
		void	(APIENTRY * GetFloatv) (GLenum pname, GLfloat *params);
		void	(APIENTRY * GetIntegerv) (GLenum pname, GLint *params);
		const GLubyte *	(APIENTRY * GetString) (GLenum name);
		void	(APIENTRY * LoadIdentity) (void);
		void	(APIENTRY * LoadMatrixf) (const GLfloat *m);
		void	(APIENTRY * MatrixMode) (GLenum mode);
		void	(APIENTRY * Ortho) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
		void	(APIENTRY * PolygonMode) (GLenum face, GLenum mode);
		void	(APIENTRY * PopMatrix) (void);
		void	(APIENTRY * PushMatrix) (void);
		void	(APIENTRY * ReadPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
		void	(APIENTRY * Rotatef) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
		void	(APIENTRY * Scalef) (GLfloat x, GLfloat y, GLfloat z);
		void	(APIENTRY * Scissor) (GLint x, GLint y, GLsizei width, GLsizei height);
		void	(APIENTRY * ShadeModel) (GLenum mode);
		void	(APIENTRY * TexCoord2f) (GLfloat s, GLfloat t);
		void	(APIENTRY * TexCoordPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
		void	(APIENTRY * TexEnvf) (GLenum target, GLenum pname, GLfloat param);
		void	(APIENTRY * TexEnvfv) (GLenum target, GLenum pname, const GLfloat *params);
		void	(APIENTRY * TexEnvi) (GLenum target, GLenum pname, GLenum param);
		void	(APIENTRY * TexImage2D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
		void	(APIENTRY * TexParameterf) (GLenum target, GLenum pname, GLfloat param);
		void	(APIENTRY * TexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
		void	(APIENTRY * Translatef) (GLfloat x, GLfloat y, GLfloat z);
		void	(APIENTRY * Vertex2f) (GLfloat x, GLfloat y);
		void	(APIENTRY * Vertex3f) (GLfloat x, GLfloat y, GLfloat z);
		void	(APIENTRY * Vertex3fv) (const GLfloat *v);
		void	(APIENTRY * VertexPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
		void	(APIENTRY * Viewport) (GLint x, GLint y, GLsizei width, GLsizei height);

#ifdef _WIN32
		int	(APIENTRY * ChoosePixelFormat) (HDC hdc, CONST PIXELFORMATDESCRIPTOR *ppfd);
		int	(APIENTRY * DescribePixelFormat) (HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
		BOOL	(APIENTRY * SetPixelFormat) (HDC hdc, int iPixelFormat, CONST PIXELFORMATDESCRIPTOR *ppfd);
		BOOL	(APIENTRY * SwapBuffers) (HDC hdc);
		HGLRC	(APIENTRY * CreateContext) (HDC hdc);
		BOOL	(APIENTRY * DeleteContext) (HGLRC hglrc);
		PROC	(APIENTRY * GetProcAddress) (LPCSTR lpszProc);
		BOOL	(APIENTRY * MakeCurrent) (HDC hdc, HGLRC hglrc);
#endif
		void	(APIENTRY * SelectTextureSGIS) (GLenum target);
		void	(APIENTRY * MultiTexCoord2fSGIS) (GLenum target, GLfloat s, GLfloat t);
		void	(APIENTRY * ActiveTextureARB) (GLenum texture);
		void	(APIENTRY * MultiTexCoord2fARB) (GLenum target, GLfloat s, GLfloat t);
		void	(APIENTRY * LockArraysEXT) (GLint first, GLint count);
		void	(APIENTRY * UnlockArraysEXT) (void);

#ifdef _WIN32
		BOOL	(APIENTRY * SwapIntervalEXT) (int interval);
#endif

#ifdef __linux__
#endif
	};
	dummyFunc_t funcs[1];
} qgl_t;

extern qgl_t qgl;


#define glAlphaFunc	qgl.AlphaFunc
#define glArrayElement	qgl.ArrayElement
#define glBegin	qgl.Begin
#define glBindTexture	qgl.BindTexture
#define glBlendFunc	qgl.BlendFunc
#define glClear	qgl.Clear
#define glClearColor	qgl.ClearColor
#define glClearDepth	qgl.ClearDepth
#define glColor3f	qgl.Color3f
#define glColor3fv	qgl.Color3fv
#define glColor4f	qgl.Color4f
#define glColor4fv	qgl.Color4fv
#define glColor4ub	qgl.Color4ub
#define glColor4ubv	qgl.Color4ubv
#define glColorPointer	qgl.ColorPointer
#define glCullFace	qgl.CullFace
#define glDeleteTextures	qgl.DeleteTextures
#define glDepthFunc	qgl.DepthFunc
#define glDepthMask	qgl.DepthMask
#define glDepthRange	qgl.DepthRange
#define glDisable	qgl.Disable
#define glDrawBuffer	qgl.DrawBuffer
#define glEnable	qgl.Enable
#define glEnableClientState	qgl.EnableClientState
#define glEnd	qgl.End
#define glFinish	qgl.Finish
#define glFogf	qgl.Fogf
#define glFogfv	qgl.Fogfv
#define glFrustum	qgl.Frustum
#define glGetError	qgl.GetError
#define glGetFloatv	qgl.GetFloatv
#define glGetIntegerv	qgl.GetIntegerv
#define glGetString	qgl.GetString
#define glLoadIdentity	qgl.LoadIdentity
#define glLoadMatrixf	qgl.LoadMatrixf
#define glMatrixMode	qgl.MatrixMode
#define glOrtho	qgl.Ortho
#define glPolygonMode	qgl.PolygonMode
#define glPopMatrix	qgl.PopMatrix
#define glPushMatrix	qgl.PushMatrix
#define glReadPixels	qgl.ReadPixels
#define glRotatef	qgl.Rotatef
#define glScalef	qgl.Scalef
#define glScissor	qgl.Scissor
#define glShadeModel	qgl.ShadeModel
#define glTexCoord2f	qgl.TexCoord2f
#define glTexCoordPointer	qgl.TexCoordPointer
#define glTexEnvf	qgl.TexEnvf
#define glTexEnvfv	qgl.TexEnvfv
#define glTexEnvi	qgl.TexEnvi
#define glTexImage2D	qgl.TexImage2D
#define glTexParameterf	qgl.TexParameterf
#define glTexSubImage2D	qgl.TexSubImage2D
#define glTranslatef	qgl.Translatef
#define glVertex2f	qgl.Vertex2f
#define glVertex3f	qgl.Vertex3f
#define glVertex3fv	qgl.Vertex3fv
#define glVertexPointer	qgl.VertexPointer
#define glViewport	qgl.Viewport

#ifdef _WIN32
#define wglChoosePixelFormat	qgl.ChoosePixelFormat
#define wglDescribePixelFormat	qgl.DescribePixelFormat
#define wglSetPixelFormat	qgl.SetPixelFormat
#define wglSwapBuffers	qgl.SwapBuffers
#define wglCreateContext	qgl.CreateContext
#define wglDeleteContext	qgl.DeleteContext
#define wglGetProcAddress	qgl.GetProcAddress
#define wglMakeCurrent	qgl.MakeCurrent
#endif
#define glSelectTextureSGIS	qgl.SelectTextureSGIS
#define glMultiTexCoord2fSGIS	qgl.MultiTexCoord2fSGIS
#define glActiveTextureARB	qgl.ActiveTextureARB
#define glMultiTexCoord2fARB	qgl.MultiTexCoord2fARB
#define glLockArraysEXT	qgl.LockArraysEXT
#define glUnlockArraysEXT	qgl.UnlockArraysEXT

#ifdef _WIN32
#define wglSwapIntervalEXT	qgl.SwapIntervalEXT
#endif

#ifdef __linux__
#endif


#define QGL_SGIS_MULTITEXTURE	(1 << 0)
#define QGL_ARB_MULTITEXTURE	(1 << 1)
#define QGL_EXT_COMPILED_VERTEX_ARRAY	(1 << 2)

#ifdef _WIN32
#define QWGL_EXT_SWAP_CONTROL	(1 << 3)
#endif

#ifdef __linux__
#endif

