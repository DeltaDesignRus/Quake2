- gl_showSky == 2 -> show sky surfaces/textures (restart required); == 3 -> show sky surfaces as wireframe
- gl_showTris|gl_showNormals: 1 + (1 -- use depthtest) + (2 -- flash color)
- gl_showbboxes (2 -- flash color; 3 -- show boxes around "world" entities with different color)
- gl_finish == 2 -> glFinish() after all draw stages
- "imagelist *" - show hash distribution (collisions)
- gl_logFile == 2 -> log only 1 frame
- gl_logTexts == 2 -> log only 1 frame
- r_surfinfo = +2 -- do not trace entities, +4 -- clip to all brushes
- gl_showImages <mask> | 1==* | 0
- r_lightmap && r_fullbright -> wireframe drawing (within a lightmap and texture)
- gl_dynamic == 2 -> uploadable dynamic lightmaps (not dlights!; restart required)
- img_reload <mask> -- reload all matched images (system images and images, which names are started with '*', not reloaded)
- gl_labels == 2 -> show labels of occluded ents
- gl_showLights == 2 -> display spotlight intensities
- gl_singleShader == 1 -> default shader for world; == 2 -> for skins too

-------------------------------------------------------------------------------
Interesting effects
-------------------------------------------------------------------------------
1. may use instead of gl_singleShader - seamless map texture on a whole map
textures/*
{
	{
		map $lightmap
	}
	{
		map *default
//		map textures/e2u3/bluwter
		tcGen vector ( 0.03 0.01 0.01 ) ( 0.01 0.03 0.01 )
		blendFunc GL_DST_COLOR GL_ZERO
	}
}

2. detail-like effect
textures/*
{
	{
		map $lightmap
	}
	{
		map $texture
		blendFunc GL_DST_COLOR GL_ZERO
	}
	{
		map *detail
		blendFunc GL_DST_COLOR GL_SRC_COLOR
		tcGen vector ( 0.05 0.003 0.003 ) ( 0.003 0.05 0.003 )
	}
	// detail again - for different direction
	{
		map *detail
		blendFunc GL_DST_COLOR GL_SRC_COLOR
		tcGen vector ( 0.003 0.05 0.003 ) ( 0.003 0.003 0.05 )
	}
}

3. view-dependent lighting
textures/*
{
	{
		map $whiteimage
		alphaGen dot 0 1
		blendFunc GL_SRC_ALPHA GL_ZERO
	}
}
