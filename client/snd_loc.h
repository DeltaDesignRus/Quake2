/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
// snd_loc.h -- private sound functions

// !!! if this is changed, the asm code must change !!!
struct portable_samplepair_t
{
	int			left;
	int			right;
};

struct sfxcache_t
{
	int 		length;
	int 		loopstart;
	int 		speed;			// not needed, because converted on load?
	int 		width;
	int 		stereo;
	byte		data[1];		// variable sized
};

struct sfx_t
{
	TString<MAX_QPATH> Name, TrueName;
	int			registration_sequence;
	sfxcache_t	*cache;
	bool		absent;
};

// a playsound_t will be generated by each call to S_StartSound,
// when the mixer reaches playsound->begin, the playsound will
// be assigned to a channel
struct playsound_t
{
	playsound_t *prev, *next;
	sfx_t	*sfx;
	byte	volume;
	int		fixed_origin:1;		// use origin field instead of entnum's origin
	float	attenuation;
	int		entnum;
	int		entchannel;
	CVec3	origin;
	unsigned begin;				// begin on this sample
};

struct dma_t
{
	int		channels;
	int		samples;			// mono samples in buffer
	int		submission_chunk;	// don't mix less than this #
	int		samplepos;			// in mono samples
	int		samplebits;
	int		speed;
	byte	*buffer;
};

// !!! if this is changed, the asm code must change !!!
struct channel_t
{
	sfx_t	*sfx;				// sfx number
	int		leftvol;			// 0-255 volume
	int		rightvol;			// 0-255 volume
	int		end;				// end time in global paintsamples
	int 	pos;				// sample position in sfx
	int		looping;			// where to loop, -1 = no looping OBSOLETE?
	int		entnum;				// to allow overriding a specific sound
	int		entchannel;
	CVec3	origin;				// only use if fixed_origin is set
	float	dist_mult;			// distance multiplier (attenuation/clipK)
	byte	master_vol;			// 0-255 master volume
	int		fixed_origin:1;		// use origin instead of fetching entnum's origin
	int		autosound:1;		// from an entity->sound, cleared each frame
};

struct wavinfo_t
{
	int		rate;
	int		width;
	int		channels;
	int		loopstart;
	int		samples;
	int		dataofs;			// chunk starts this many bytes from file start
};


/*
====================================================================

  SYSTEM SPECIFIC FUNCTIONS

====================================================================
*/

// initializes cycling through a DMA buffer and returns information on it
bool	SNDDMA_Init(void);

// gets the current DMA position
int		SNDDMA_GetDMAPos(void);

// shutdown the DMA xfer.
void	SNDDMA_Shutdown(void);

void	SNDDMA_BeginPainting(void);

void	SNDDMA_Submit(void);

//====================================================================

#define	MAX_CHANNELS			32
extern	channel_t   channels[MAX_CHANNELS];

extern	int		paintedtime;
extern	int		s_rawend;
extern	dma_t	dma;
extern	playsound_t	s_pendingplays;

#define	MAX_RAW_SAMPLES	8192
extern	portable_samplepair_t	s_rawsamples[MAX_RAW_SAMPLES];

extern cvar_t	*s_volume;
extern cvar_t	*s_loadas8bit;
extern cvar_t	*s_khz;
extern cvar_t	*s_testsound;
extern cvar_t	*s_primary;		//?? win32-only

void S_InitScaletable(void);

sfxcache_t *S_LoadSound(sfx_t *s);

void S_IssuePlaysound(playsound_t *ps);

void S_PaintChannels(int endtime);

// picks a channel based on priorities, empty slots, number of channels
channel_t *S_PickChannel(int entnum, int entchannel);

// spatializes a channel
void S_Spatialize(channel_t *ch);
