PROBLEMS (LINUX/CYGWIN):
~~~~~~~~~~~~~~~~~~~~~~~~
build.sh: timing info format incorrect (linux)
linux testapp.cpp display warning about gets(); cygwin - no warning!
------- REQUIREMENTS --------
min GCC version: 3.4.0
  3.3.2 have no:
    -Wno-invalid-offsetof
    - error in Core/Strings.h with PRINTF() macro?
    ... not tested more


FIRST TODO (for crash detection):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- fast math - make ability to turn off with #define (for debug; may be, GCC optimizes good by self ...)
- floor/ceil/round: not so fast ... (check GCC FAST_MATH ...); appRound() via lrint() rounds 2.5 and 4.5 to 3 (same as VC ...)
- assert(cond) or UT-like check() and verify()
- special code to test fast math functions (appRsqrt, appFloor, IsNegative, FAbsSign, ...) -- exec function + compare with non-fast
  equalent; allow small error; exec inside loop to disallow compile-time computations (either iterate values, or use table ...)


GCC TODO:
~~~~~~~~~
! mingw32 exception system broken (used exception -> C++ throw before ...)
- may be, access to SDK/includes from src as '#include <*>' instead of '#include "*"'
- asm constructions:
  - check floor/ceil/round (implement asm? check mingw math.h header for some details)
! compare VC/GCC speed (after floor/ceil/round -> GCC asm)
- "-ffunction-sections" slightly increase exe size; "-fdata-sections" grow q2 executable size up to 5 Mb ?!
- structure copy (for CVec3) is per-element (not memcpy())


To port application to Linux require following steps:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* port Core/*Win32.cpp
* exception hook: use signal() functions
* compile TestApp
- make net_wins.cpp cross-platform (initial: can create "empty" net device with loopback caps)
- create sys_win.cpp for Linux (may be, create set of MainLoop wrappers in Core headers -- or set of main()/WinMain()
  functions, and app should provide MainLoop() only?)
- compile dedicated server (1.cygwin 2.linux)
- verify network compatibility with Win32
- ...
- create empty sound driver
- port input+windowing -> SDL (may use cygwin+sdl !)
- ...
- create OpenAL sound driver, use for win32 too
- ...


Notes:
* appGetSystemErrorMessage() -- strerror(code)
* #pragma(pack...) -- struct name __attribute__((__packed__)) {}
  (note: may use __attribute__((packed)) instead
- function attributes:
  - warn_usused_result - warning, when result of function ignored
  - constructor/destructor - call function before main()/exit()
  - format_arg(index) - arg #index is printf-like format specifier
- DLL_IMPORT/DLL_EXPORT:
  * use __attribute__((visibility))
  - check "dsohowto.pdf" chapter 2.2 (seems, require GCC 4+ or patched compiler)
  - check misc/compilers/GCC_Visibility.htm
- varargs in macros (see GCC doc 5.15)
- type_t varName; "typeof(varName) varName2" == "type_t varName2"
- __func__ macro: "const char name[]" of current function
- i386 type attribute: ms_struct, gcc_struct

----------------------------------------------------------

* /proc/version -- OS version (can use uname())
  /proc/cpuinfo -- CPU information (can use for non-x86 or when no CPUID support)
* /proc/%d      -- some process information (%d == pid); can use "self" instead of %d
    cmdline     -- very similar to argv[]; useless for self
*   exename
*   maps        -- which exe/dll/so loaded (2.4); WARNING: linux and cygwin have different "offset" meaning! (cygwin => entry point)
