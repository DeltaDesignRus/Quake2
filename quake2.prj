# script file; perl highlighting

NOSHARED=1			#!!!! shared

#!! should be specified with cmdline
COMPILER = VisualC

!if $COMPILER eq "VisualC"
	WARNLEVEL = 3
	OPTIMIZE  = size
	STDLIBS   = kernel32 user32 gdi32
#	INLINES   = explicit
#	LIBC      = static
#	PDB       = 1
!endif

OUT = Release
MAPFILES = 1

#------------------------------------------------------------------------------

D = Core/Src
CORE = \
	$D/CoreMain.cpp \
	$D/DbgSymbols.cpp \
	$D/Memory.cpp \
	$D/OutputDevice.cpp \
	$D/ErrorMgr.cpp \
	$D/ScriptParser.cpp \
	$D/Strings.cpp
#	$D/FileSystem.cpp
#	$D/Commands.cpp
#	$D/Core.cpp
CORE_WIN32 = \
	$D/CoreWin32.cpp \
	$D/DbgSymbolsWin32.cpp \
	$D/ExceptFilterWin32.cpp
#	$D/FileSystemWin32.cpp

D = client
CLIENT = \
	$D/cl_cin.cpp \
	$D/cl_download.cpp \
	$D/cl_ents.cpp \
	$D/cl_fx.cpp \
	$D/cl_input.cpp \
	$D/cl_main.cpp \
	$D/cl_newfx.cpp \
	$D/cl_parse.cpp \
	$D/cl_playermodel.cpp \
	$D/cl_pred.cpp \
	$D/cl_scrn.cpp \
	$D/cl_tent.cpp \
	$D/cl_view.cpp \
	$D/console.cpp \
	$D/keys.cpp \
	$D/menu.cpp \
	$D/qmenu.cpp \
	$D/ref_vars.cpp \
	$D/snd_dma.cpp \
	$D/snd_mem.cpp \
	$D/snd_mix.cpp \

D = server
SERVER = \
	$D/sv_anim.cpp \
	$D/sv_ccmds.cpp \
	$D/sv_ents.cpp \
	$D/sv_game.cpp \
	$D/sv_init.cpp \
	$D/sv_main.cpp \
	$D/sv_send.cpp \
	$D/sv_text.cpp \
	$D/sv_tokenize.cpp \
	$D/sv_user.cpp \
	$D/sv_world.cpp
DED_CLIENT = \
	$D/sv_dedicated.cpp

D = qcommon
COMMON = \
	$D/anorms.cpp \
	$D/cmd.cpp \
	$D/cmodel.cpp \
	$D/common.cpp \
	$D/crc.cpp \
	$D/cvar.cpp \
	$D/entdelta.cpp \
	$D/files.cpp \
	$D/images.cpp \
	$D/md4.cpp \
	$D/model.cpp \
	$D/msg.cpp \
	$D/net_chan.cpp \
	$D/pmove.cpp \
	$D/q_shared2.cpp \
	$D/zip.cpp

D = ref_gl
GL_RENDERER = \
	$D/gl_backend.cpp \
	$D/gl_buffers.cpp \
	$D/gl_frontend.cpp \
	$D/gl_image.cpp \
	$D/gl_interface.cpp \
	$D/gl_light.cpp \
	$D/gl_lightmap.cpp \
	$D/gl_main.cpp \
	$D/gl_math.cpp \
	$D/gl_poly.cpp \
	$D/gl_shader.cpp \
	$D/gl_sky.cpp \
	$D/gl_text.cpp \
	$D/gl_model.cpp \
	$D/gl_bspmodel.cpp \
	$D/gl_trimodel.cpp

D = win32
WIN32_FILES = \
	$D/cd_win.cpp \
	$D/in_win.cpp \
	$D/net_wins.cpp \
	$D/fs_win.cpp \
	$D/snd_win.cpp \
	$D/sys_win.cpp \
	$D/vid_dll.cpp
DED_WIN32 = \
	$D/net_wins.cpp \
	$D/fs_win.cpp \
	$D/sys_win.cpp

# Win32 renderer files
GL_RENDERER  +=  $D/qgl_win.cpp  $D/gl_win.cpp

# Win32 resources
WIN32_FILES += $D/q2.rc


# internal files
RES_FILES = \
	resource/makeres.asm


INCLUDES  = SDK/include Core/Inc qcommon
LIBRARIES = SDK/lib

#------------------------------------------------------------------------------
# static build

DEFINES = STATIC_BUILD CORE_API=
OBJDIR  = $OUT/obj/CoreStatic
sources(STATIC) = $CORE $CORE_WIN32

DEFINES = STATIC_BUILD CORE_API= SINGLE_RENDERER	#?? SINGLE_RENDERER -- check when will be 2+ renderers
OBJDIR  = $OUT/obj/q2stat
sources(STATIC) = $CLIENT $SERVER $COMMON $WIN32_FILES $RES_FILES $GL_RENDERER

LIBS = winmm lib/lib
target(executable, $OUT/quake2, STATIC, STATIC)

#------------------------------------------------------------------------------
# dynamic build

!ifndef  NOSHARED		#!!!! shared

# !! not works now !!
DEFINES = CORE_API=DLL_EXPORT
OBJDIR  = $OUT/obj/CoreShared
sources(CORE) = $CORE $CORE_WIN32

IMPLIB = $OUT/Core
target(shared, $OUT/Core, CORE, DYNAMIC)

#----------------------------

LIBS = winmm lib/lib $OUT/Core

DEFINES = CORE_API=DLL_IMPORT
OBJDIR  = $OUT/obj/q2dyn
sources(DYN_EXE) = $CLIENT $SERVER $COMMON $RES_FILES $WIN32_FILES

target(executable, $OUT/quake2_dyn, DYN_EXE, DYNAMIC)

#----------------------------

LIBS = winmm $OUT/Core

# we should define DYNAMIC_REF to allow link from renderer to engine functions
DEFINES = CORE_API=DLL_IMPORT DYNAMIC_REF
OBJDIR  = $OUT/obj/gldyn
sources(DYN_GL) = $GL_RENDERER qcommon/q_shared2.cpp client/ref_vars.cpp

target(shared, $OUT/ref_gl, DYN_GL, DYNAMIC)

#!! + dedicated

!endif				#!!!! shared

#------------------------------------------------------------------------------
# dedicated server

DEFINES = STATIC_BUILD CORE_API=
OBJDIR  = $OUT/obj/CoreStatic
sources(DEDICATED) = $CORE $CORE_WIN32

DEFINES = STATIC_BUILD CORE_API= DEDICATED_ONLY
OBJDIR  = $OUT/obj/dedstat
sources(DEDICATED) = $DED_CLIENT $SERVER $COMMON $DED_WIN32 $RES_FILES

LIBS = winmm lib/lib
target(executable, $OUT/q2ded, DEDICATED, DEDICATED)
