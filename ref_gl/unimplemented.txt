!!! game_loading screenshots:
  - update when written new file (force to update inside renderer after screenshot performing: find loaded images and reload, pics only)
  - display from menu

? cmodel_t:
  - add "void *faces"   - filled/used by renderer (and clean R_LoadSubmodels)
  - add "vec3_t center" - who will fill/update this ? ((mod->mins+mod->maxs)/2+ent->origin)

- color shell: should use size=0.5 for weapons and =3 for main model (use "fromEntity" ?)
- reflections:
  - small bugs when one can see througs another (for example, lift on map "japan"; "ground3") - unstable draw order
  - adjust ALPHAGEN_DOT consts (+ compensate near distances -- too opaque)
  - should add reflections on SURF_ALPHA with minAlpha > 0 (require to check image)
  - map "ground3": invalid reflections on smoke - should not be (used tex with maxAlpha=0)
  - try another texture
  - try cvar (temp) for envmap_scale and envmap_alpha_const
  - cvar for disabling envmaps
  - cvar for disabling HQ windows with envmaps
  - needs to remove extra.plane.axis when shader have deformVertexes
- flares:
  ? correct fov
  ? try (with map script) "autoflare" for SURF_LIGHT (auto: color, position, size (depends on s->value and s->size ?))
  ? (auto-)link to surface, cull with surface backface culling
- fog:
  !!! BUGS !!! works incorrect with multi-pass rendering
  ? reading parms from file (model.c)
  - gl_fog cvar
  ? controlling from console
  ? should not be affected by fog (check it!)
  ! if fogDens > LIMIT -> sky = defaultSky, its color = fogColor

COLORS:
! need to save dlight color before overbright for entity lighting
? need to modulate dlight color/alpha (check Q3)
! overbright particles (use identityLight) or particle color table
? overbright beams
- saturate tbl_8to32 (and make separate color table for color >> overbright ??)
- move SATURATE(c,l,v) to q_shared2.h ?
- gl_overbright:
  - 0-none (force off), 1-"1bit" (force on), 2-"auto" (ON when (vertexLight | (multitex. && !(combine|combine4))) && fullscreen (??))
  - remove gl_overbrightBits
  - menu selectable

PreprocessShader:
  - add GL_DECAL blend: src=SRC_ALPHA, dst=ONE_MINUS_SRC_ALPHA
  - add GLSTATE_MODULATE2 (to blend modes, valid only with GL_EXT_texenv_combine or GL_NV_blend_square (only for 1st tmu ??))
  - can combine (src_a, 1-src_a)+(1,1)
  - constRgba/identRgba -> rgbType,alphaType = {compute,const,ident (const=1),vertex,vertexConst(vetrex*const)}

- dynamic lightmaps:
  ? option (menu): dynamic lightmap type - uploadable/multipass/auto
  ? when no multitexture - use "multiPassLM = false" (if "auto")
  - many dynamic lightmaps in: market, alley1 (look outside world), rc4 (at start point), punwar (not too slow?), vertigo
    lpbheaven (strong lighting, lots of SURF_TRANS + dl), beachassault (inside ship: shader with 3 lightstyles)
! rename "gl_local.h" to something another (and change "#ifndef __GL_LOCAL_...")
- SHADER_WALL -> SHADER_WORLD (depthwrite, depthtest) or add SHADER_HUD (no write/test)
- add SHADER_SPRITE: alpha/alphatest, depth-write/test, sort=5, rgb/alpha-gen=vertex
? don't need shader->sortParam other than sky/opaque/seethrough (may be, +coronas +hud)

? do not render while window is minimized (less CPU usage)
- r_nocull works only with frustum culling (extend cvar or add another ...)
!! vertex arrays are not 16-byte aligned (see gl.log)
? reimplement fast drawing (multitexturing etc.)

- dlights:
  - when model lighting will be implemented, do not use (compensate?) dlighted vertex lightmaps, use dlight info itself
  - cut dlights (by angle: rad/intens = cos(angle))
  - speedup of markup process (?):
    1) share planes between surfs
    2) add "dlightMask" for plane
    3) WalkBspTree(): mark plane dlights (no surface dlights)
    4) DrawBspSeq(): give dlight info from planes
    !) need a way to provide dlight info for inline models (static (WORLD) and dynamic models)
- shaders:
  ? make shader_t.name dynamically allocated (~ basenamed_t)
  ? sky shader: specify color for "gl_fastSky"
? "gl_fastSky 2" - use "*sky" shader; add color to "*sky" shader (color-filled skies)
? gl_lastValidRenderer (reset all config params ("reset gl_*" if changed ??); example of value -- "Riva TNT2/SSE")
? remove "SHADER_WALL" flag; add "SHADER_WORLD" -- depth test/write (other -- 2D) ? "SHADER_MIPMAP" ?
- gfxinfo:
  ? gamma info (on startup: remove or extend ?), overbright info, extended mtex info -> gfxinfo
  ? "UberEngine": cvar "r_gfxinfo" (display when modified only ??)

- tesselation (subdivision):
  - map "ground3": bug on broken window (look outside caffe)
  - map "campmc": bug on water (bad tesselation) when tessSize=64,SUBDIV_ERROR=0.1 and SubdividePoly() have
  	if ((*v1)[axis] < value1)	side1 = 1;
  	else if ((*v1)[axis] > value2)	side1 = 2;
  	else				side1 = 3;
     to detect side[1|2] (no error when used "<=" and ">=" instead of "<" and ">")

BUGS:
! gl_singleShader don't works with dynamic lightmaps
? map "terrain", light cone from helicopter: too opaque when overbright is 1 (invalid lightmap on alpha-surf ?)
? check demo "massive1": have error "frame #46 not found"
- screenshot is black after changing color depth, but all OK when make one more vid_restart (TNT2, Win2K, 41.09)

UNSTABLE BUGS:
?* check: cannot change bitdepth (at home): may be, require to recreate window (check ol Q2 versions, check work)

--------- Mandatory ------------
VISIBLE:
- models (entities)
  - md2
    - IR-vision fx
    - flashing fx (sometimes rgbGen entity, or 2 shaders: with/without flashing ?)
    - lefthand (weapon model):
      - for directional lighting: inverse axis[1] for normals (use different normals array ?)
    - dynamic lighting (RecursiveLightPoint)
    - check all RF_XXX flags from q_shared2.h
- screen blending (underwater etc.): move this outside renderer, make with DrawFill2 (check ref_soft !)
- shadows
- inlineModels: RF_TRANSLUCENT/RF2_ALPHA: qglColor4f (1,1,1,0.25)/qglColor4f(1,1,1,1) + blend + no lightmap (vertex light ?)
  (require entstring preprocessing ? may be implemented on map-load-time ?)
INVISIBLE:
! freeing of old images (and "bool temp" or "int usage" flag)
FOR GAME:
- re.GetClientLight

--------- Improvements -----------

!? for qgl: implement extension aliasing (EXT -> ARB) with aliases for extension/function names (constants are the same)
  (texture_env_combine (slightly different!), texture_env_add etc.)
? rail fx (change)
- optimize sky box drawing:
  - make more than 6 rects (6 * skyTessSize^2)
  - perform fast surface tesselation (need only verts.xyz)
  ? can tesselate SOME surface as axis-aligned rects (find surf planar mins/maxs) (problems when surf can be placed on some
    box sides)
  - can use surface normal to determine IMPOSSIBLE planes
  - find fast cases, when surface placed only on one plane
- gl_showbboxes, gl_singleShader, gl_showtris -> cheat
- vertex lighting:
  - surface simplification (?) + subdivision (!) for complex lightmaps (non-gradient color change) - as option
    (lighting = "lightmap", "vertex", "hq vertex")
- gl_logFile:
  ? remove "GL_" and "gl" prefixes (looks like OpenGL spec)
  ? add error checking after commands (qgl.in: ERROR)
  ?? add profiling (qgl.in: PROFILE)
?? make area_t, cluster_t, area.clusterList, cluster.leafList (faster MarkLeafs()/LightPoint())
? make skins for models with 1 frame to be sh.fast==true (and implement it in AGP memory);
  Problem: how to apply lighting? (and: skins may be dynamically changed from "fast" to "slow")
! triangle models: build lods
? "gl_alphaLightmap" (arc, def: "1") -- can disable lighting of alpha/warp surfaces; add option to menu
  (easy implement, but naming problems ...)
! water lightmaps: try to GENERATE vertex light for water
- improve SURF_ALPHA quality on near distances (determine const for checking this requirement?):
  - scale (enlarge) texture with keeping alpha = 0 or 255
  ? make 2 copies of image (when necessary): with and without alpha-channel (have some KP maps with same texture used
    as window and as wall) -- IMAGE_ALPHA flag (use different resampling techniques)
? what to do with "intens" param in GLimp_SetGamma() ? remove ??
- backend GeterateColors (and other?): for multipass rendering can save "current
  type of data in buffer" and use it later (example: 1st pass - rgbGen_vertex, 2nd -
  same -- do not update)

-------------------------------------

NOTES:

- for directional lighting: can use quantization of normals with 256 values,
  use glut/progs/advanced[97 ?? same ??]/sphere.c for generate required number of vertexes
