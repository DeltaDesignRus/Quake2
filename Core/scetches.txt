FILE SYSTEM
~~~~~~~~~~~
? special syntax: "container:path/filename.ext" -- ability to access explicit file_container/file
- CFileList *ListFiles(pattern,flags)
   - flags: PAK,OS,FILES,DIRS  (PAK|OS <> 0 && DIRS|FILES <> 0 ! will return empty list otherwise)
      - FS_PATH_NAMES   - path + name
      ? RECURSE_SUBDIRS - look in subdirectories; +special case for !FS_PATH_NAMES - keep relative path
      ? KEEP_DUPLICATES - name = "pak:path/name" (incompatible with !FS_PATH_NAMES), or field "CFileContainer *Owner"
- DeleteDirectory():
   ? with files
   ? should process directory trees
* flag "bool fs_modified":
  -> CFileSystem::modifyCount
  ? when user was unlinked some TAG_BASE paks, this flag is set to true and when game is changed, should completely unlink all
    files and relink base files again
- reading files:
   - GZip files (can auto-detect); can create such files too (special flag for FS_CreateFile() function)
   - text files (remove CR ('\r') from stream)

PACKAGE SYSTEM
~~~~~~~~~~~~~~
Info per package:
* predefined (compile-time)
   - name
   - version information
   ? resources (inline files)
   ? configuration info
      - menu items (in resources ?) -- package configuration
      - information about package purpose (video/audio driver etc.) -- can be used for auto-registered (in config menu) drivers
* filled during program run
   ? allocated memory
      - automatically released when package is unloaded
      ? leak detection
      - stats
   ? opened files (mostly, unneeded)
   - registered commands (auto-free)
   ? cvars (free/unlink when package unloaded ?  Freeing will require config system reorganization (in comparision to Q2/Q3 etc),
     because we must poll vars to config file and remove from memory; when package loaded -- needs to read corresponding cfg part.)
- may be, declare stdcall DllMain() function for renderer dlls (for package) - this will
  remove kernel::DisableThreadLibraryCalls() import
- may be, decalre own malloc() for dll == appMalloc() (only for non-core packages + VisualC !!!) - will remove
  malloc() call (useful only for static link of package dll with msvcrt.lib)

SUBSYSTEMS
~~~~~~~~~~
? part of package (can have separate cvars)
- register all subsystems within a global list
- purpose: notifications:
  - unloading package (free package core resources ?)
  ? loading package
  - system crash
  - system exit (automatically deactivate all subsystems; order-dependent ??)

CONFIG SYSTEM
~~~~~~~~~~~~~
? share cvars between packages
   - can cache cvars: keep in memory when package unloaded (or: load all cvars on engine init.)
   - if cached, can allow access to config of unloaded package ("set pkgname.cvarname value")
   ? user cvars -- pkg "user"
      - not linked to any code (created with console/script command)
   ! should not be cvars with the same name in 2 simultaneously loaded packages (user cvars will be copied to pkg var
     (preinitialized) and removed)
      - need mechanism to get cvars, owned by different package (global (engine ?) cvars ??)
   - access by simple (without "pkgname." part) name: scan packages for cvar, scan user cvars
   ? CVAR_[USER|SERVER]INFO: can remove this flag, send such cvars to server manually
   ? enumerator for Cvars()
- storage (variants):
   1) UT-like config with section-per-package
      - requires to change file extension from .cfg to another (.ini) -- this is not a script file
   2) standard quake config with names in form "pkgname.cvarname"
   - problem: user cvars -- in which section (package) to store ?


OPENGL RENDERER
~~~~~~~~~~~~~~~
- use GL_ALPHA[xx], GL_LUMINANCE[xx] (?) texture formats for some textures (auto-detect format)
- add GL_ARB_vertex_buffer_object extension (at least for model tex coords)


COMMAND SYSTEM
~~~~~~~~~~~~~~
- add ExecuteCommand(argc,argv) -- send already split command line (used in q2 by "rcon" only?)
- aliases: add support for bash_function-like arguments (bash have no args for aliases, but our command system have no functions ...)
  ? make as function? aliases - no args
- argument for all commands "--silent" or "-silent" -- will redirect output to GNull (should correctly process such flag in
  renderer "screenshot" command -- executed asynchronously !)
  ? may be, make generic redirection: "command >null" or "command >file"


COMMON
~~~~~~
- extend TList with item count (different base class + new InsertItem(), change constructor)
? console window:
  - set title to appPackage()
  - hook Ctrl-C etc (win32 only; unix: hooked)
? iterators: make template, not based on any class (base is not needed?!), and iterate any class, containing field "next",
  pointed to the same data type
- wildcards for filenames: make something like "path/filename.#pcx,jpg,tga" to work - find all images, started with "filename"
  - currently, require "path/filename.pcx,filename.jpg,filename.tga" - should interlace mask and filename; wanted: store mask
    separately: "pcx,jpg,tga" with simple adding to filename
  - '#' - place, when wildcard started; currently, started after last '/' for filenames -- really, started from start of string
  - may be, make following form (bash-like): "path/filename.{pcx,jpg,tga}"
  * currently used: "path/*.pcx,*.tga,*.jpg"
- NO_DEBUG=1
  - no stats


MEMORY
~~~~~~
- when package unloaded - notify memory manager (can make memmgr as subsystem ?!); memmgr will enumerate
  all allocated blocks and display (or, at least, free) blocks, allocated, but not free'ed from unloaded package
- memory stats: with MEM_STATS implement API for registering status func; will display:
  - subsystem name (game, renderer + subsystems (images, models, bsp, lightgrid ...), etc) + info (bytes/blocks ...)
  - memory usage
  - percent of total memory usage
