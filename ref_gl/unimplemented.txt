- image/shader manager:
  ? easily can reuse autogenerated shader (2D - 1 stage, 3D - 2 stages, no gens/mods)
  ! images: add ALPHA(r=g=b=0,a)|LUMINANCE(r=g=b,a=255)==1|LUMINANCE_ALPHA(r=g=b,a)==2 format
    NOTE: ALPHA - rgb ignored in all TexEnv functions
  - dither 32->16 bit (when r_textureBits==16); dither mipmaps
  ? dither mipmaps
  ? POSSIBLE BUG (feauture): Q3 uses alpha for specular lighting; check for problems with alpha-special Resample/MipMap

- gl: HW lighting: do not require to rotate/remap grid lights to model axis
!* check ATAN2/ACOS speed on normal building loading and remove #if/#else/#endif stuff from gl_model.c
?* demo "tower": too slow loading >32 clients (in comparision with oldgl)
! add gl_depthBits: without it 32-bit mode works with 16-bit depth buffer; when depthbits = 0 - use 24-bit for 32-bit color
  (as in Q3)

!!! autoflares:
  - should combine bsp-divided surfaces onto a single flare
? try vertex light on water
? try for surf lights: if occluded nearest and center point, trace to far point ( == (center-near)*2+near ) (at least, when
  no light from other light sources - i.e., with 2nd pass)


lighting bugs:
  - map "ktdm1", {64,0,144} - teleporter model is too black (lightgrid bugs); same bug with "q2dm1"
  - "winter": too dark inside shadows (and: inside caverns should be "area lights" (check arghrad tutorial for understanding ...))
  - "beachassault": too dark inside ship
  - weapon model can get light from inside wall (should use vieworg instead of ent.origin for lighting)

- lighting:
  ! optimized lightmaps: convert to vertex light, implement correct PreprocessShader() for it (vertex lm + dlight -- buggy)
  ? cache ALL styles (needs a different cell format); r_speeds: grid info - size in Kb (?)
  * ambient light from sun (from sky surfaces, not depends on distance)
  - weapon model: use vieworg for lighting (can get light through near-placed wall)
  ? minlight
  - R_LightPoint
  - saturate lights (when r_lightmap==3 - with "-1" ?)
    + check lighting with saturation == 0, == -1; with overbright
  - subdivide large surface lights (trace additional points) when computing light
  ! speedup trace: "stop-on-collide" flag (for fast detection of tr.fraction != 1)
  !! NEW LIGHTGRID SYSTEM !!
  ! should use lightstyle 0: mod "nightdm" uses it for creating dark maps
  - allow overbright on models (use modulate2x, cache light in 0..2 range); WARNING: check correct light/angle dependency
    (for test: ship projector on "beachassault")
  - movable inline model lighting (disabled now):
     ? incorrect intensity ("actcity2" - rotating gate) -- may be, for frame models too
     - make it with entity script only -- lightmaps by default (or reject by size)
     - should make envmaps work
     - dlights should be applied in a usual for lightmaps way (not )
     - some models have "_minlight" field (other fields too?)
     - entity may have its own light surfaces (map "skytower" -- lift have SURF_LIGHT)
       (if attach lights to entity, lightgrid should be reimplemented ? or check this lights every time ?)
     ? compute lighting not for point but for box (or for each surface separately ??); may be, with special (not generic)
       function -- without dlights etc (if for each surface -- only 1 vector)
     ? cache lighting when entity in a stopped state (cache will require separate holding of fast lightstyles)
     info: "rc1" escalator looking good
     each_surface: check "teehc2" with crane enabled

- replace "sqrt" -> SQRTFAST

- gamma:
  - correct screenshots with contrast/intens (fill gammaTable in GLimp or send this table to SetGamma())
  ? what to do with "intens" param in GLimp_SetGamma() ? remove ??
  ? remove "r_intensity"
  - document this cvars
  - move gamma computations to renderer, send computed table to SetGamma() (but with more precition ? WHO WILL COMPUTE TABLE ??)
  - update software gamma code

? cmodel_t:
  - add "void *faces"   - filled/used by renderer (and clean R_LoadSubmodels)
  - add "vec3_t center" - who will fill/update this ? ((mod->mins+mod->maxs)/2+ent->origin)
? remove gl_fog stuff

- color shell: should use size=0.5 for weapons and =3 for main model (use "fromEntity" ?)
- reflections:
  - small bugs when one can see througs another (for example, lift on map "japan"; "ground3") - unstable draw order
    (or not enough vertex buffer size -- in this case, multitexturing for envmaps will help)
  - adjust ALPHAGEN_DOT consts (+ compensate near distances -- too opaque)
  - should add reflections on SURF_ALPHA with minAlpha > 0 (require to check image)
  - map "ground3": invalid reflections on smoke - should not be (used tex with maxAlpha=0)
  - try another texture
  - try cvar (temp) for envmap_scale and envmap_alpha_const
  - cvar for disabling envmaps
  - cvar for disabling HQ windows with envmaps
  - needs to remove extra.plane.axis when shader have deformVertexes

- flares:
  ? correct fov
  ? flare image have visible square (when its color is saturated)
  - saturate flares
  - implement with GL_NV_occlusion_query (and flare option: off, software, hardware);
    test should be performed after whole 3D world is out from backend

- fog:
  !!! BUGS !!! works incorrect with multi-pass rendering
  ? reading parms from file (model.c)
  - gl_fog cvar
  ? controlling from console
  ? should not be affected by fog (check it!)
  ! if fogDens > LIMIT -> sky = defaultSky, its color = fogColor

? gl_state:
  - add GL_Color() (do not compare, but save to struc ...)
  - add GL_SaveState() / GL_RestoreState(): copy struc / enum saved + call funcs for saved fields
    (or GL_SaveState(savePtr) / GL_SetState(glState))

Colors:
  ! need to save dlight color before overbright for entity lighting
  ? need to modulate dlight color/alpha (check Q3)
  ! overbright particles (use identityLight) or particle color table
  ? overbright/saturate beams
  - saturate tbl_8to32 (and make separate color table for color >> overbright ??)

- gl_overbright:
  - 0-none (force off), 1-"1bit" (force on), 2-"auto" (ON when (vertexLight | (multitex. && !(combine|combine4))) && fullscreen (??))
  - remove gl_overbrightBits
  - menu selectable

PreprocessShader():
  - add GL_DECAL blend: src=SRC_ALPHA, dst=ONE_MINUS_SRC_ALPHA
  - add GLSTATE_MODULATE2 (to blend modes, valid only with GL_EXT_texenv_combine or GL_NV_blend_square (only for 1st tmu ??))
  - can combine (src_a, 1-src_a)+(1,1)
  - constRgba/identRgba -> rgbType,alphaType = {compute,const,ident (const=1),vertex,vertexConst(vetrex*const)}
- shaders:
  ? make shader_t.name dynamically allocated (~ basenamed_t)
  ? sky shader: specify color for "gl_fastSky"
  - backend GeterateColors (and other?): for multipass rendering can save "current
    type of data in buffer" and use it later (example: 1st pass - rgbGen_vertex, 2nd -
    same -- do not update)

- dynamic lightmaps:
  ? option (menu): dynamic lightmap type - uploadable/multipass/auto
  ? when no multitexture - use "multiPassLM = false" (if "auto")
  - many dynamic lightmaps in: market, alley1 (look outside world), rc4 (at start point), punwar (not too slow?), vertigo
    lpbheaven (strong lighting, lots of SURF_TRANS + dl), beachassault (inside ship: shader with 3 lightstyles)

! rename "gl_local.h" to something another (and change "#ifndef __GL_LOCAL_...")
- SHADER_WALL -> SHADER_WORLD (depthwrite, depthtest) or add SHADER_HUD (no write/test)
- add SHADER_SPRITE: alpha/alphatest, depth-write/test, sort=5, rgb/alpha-gen=vertex
? don't need shader->sortParam other than sky/opaque/seethrough (may be, +coronas +hud)
? disable REF_NEWFX when necessary image files absent

- r_nocull works only with frustum culling (extend cvar or add another ...)
!! vertex arrays are not 16-byte aligned (see gl.log)
? reimplement (remove?) fast drawing

- dlights:
  ? cdlight_t.minlight
  - cut dlights (by angle: rad/intens = cos(angle)); backlights -- rad/intens can be greater (for culling)
  - speedup of markup process (?):
    1) share planes between surfs
    2) add "dlightMask" for plane
    3) WalkBspTree(): mark plane dlights (no surface dlights)
    4) DrawBspSeq(): give dlight info from planes
    !) need a way to provide dlight info for inline models (static (WORLD) and dynamic models)
  - increase DLIGHT_BITS, store dlightMask instead of numDlights in surface array when ap.numDlights <= DLIGHT_BITS

Screenshots:
  - on auto-save, when entering "base2", flares appeared (but should be occluded by lift door)

? "gl_fastSky 2" - use "*sky" shader; add color to "*sky" shader (color-filled skies)
? gl_lastValidRenderer (reset all config params ("reset gl_*" if changed ??); example of value -- "Riva TNT2/SSE")
- gfxinfo:
  ? gamma info (on startup: remove or extend ?), overbright info, extended mtex info

- tesselation (subdivision):
  - map "ground3": bug on broken window (look outside caffe)
  - map "campmc": bug on water (bad tesselation) when tessSize=64,SUBDIV_ERROR=0.1 and SubdividePoly() have
  	if ((*v1)[axis] < value1)	side1 = 1;
  	else if ((*v1)[axis] > value2)	side1 = 2;
  	else				side1 = 3;
     to detect side[1|2] (no error when used "<=" and ">=" instead of "<" and ">")

HW occlusion:
  - model culling: use hw occlusion test (HP or NV), if NV -- can use LOD when model partially visible
  - correctly use with near/far (and side ?) clipplanes (do not try to cull when object is VERY near, it
    can reduce fillrate too ...)
  - sort surfaces (and models) back to front to utilize new hw culling technologies
  - try to use frame-to-frame coherency to reduce number of occlusion queries
  ? for details and other ideas, see GL_NV_occlusion_query spec

BUGS:
! map "underrain": have sky brushes (MYST) for cave lighting; when vieworg is inside such brush - only sky painted
  (oldgl: same as non-transparent water, combines 2 clusters vis)
- Com_Error(ERR_DROP, ...) can cause "halt" renderer (will in loop display "red" message without screen update,
  can switch to "oldgl" (to see this messages), but will crush when switch back to "gl" (if SrtageIterator() ?))
! gl_singleShader don't works with dynamic lightmaps
? map "terrain", light cone from helicopter: too opaque when overbright is 1 (invalid lightmap on alpha-surf ?)
? check demo "massive1": have error "frame #46 not found"
- screenshot is black after changing color depth, but all OK when make one more vid_restart (TNT2, Win2K, 41.09)
! zaero, demo4, kamikaze: too dark explosion (should get lighting for LARGE objects in a different way)
  same: 1st map, beginning, give EMP grenade, throw (best viewed from 3rd person) -- can be bad lighting
- can't use alpha test for SHADER_WALL (dm_duke... have assault/glass texture, which is SURF_ALPHA with alpha < 0.5)

UNSTABLE BUGS:
* check: cannot change bitdepth (at home): may be, require to recreate window (check all Q2 versions, check work)

--------- Mandatory ------------
VISIBLE:
- models (entities)
  - md2
    - IR-vision fx
    - check all RF_XXX flags from q_shared2.h
- shadows
? inlineModels: RF_TRANSLUCENT: qglColor4f (1,1,1,0.25) + blend + no lightmap (vertex light ?)
FOR GAME:
- re.GetClientLight

--------- Improvements -----------

? combine all tcMod's (all but wave) into a single matrix (TCMOD_TRANSFORM)
!? for qgl: implement extension aliasing (EXT -> ARB) with aliases for extension/function names (constants are the same)
  (texture_env_combine (slightly different!), texture_env_add etc.)
- optimize sky box drawing:
  ? can tesselate SOME surface as axis-aligned rects (find surf planar mins/maxs) (problems when surf can be placed on few box sides)
  - find fast cases, when surface placed only on one plane (use surface bounds ?)
- vertex lighting:
  - surface simplification (?) + subdivision (!) for complex lightmaps (non-gradient color change) - as option
    (lighting = "lightmap", "vertex", "hq vertex")
- gl_logFile:
  ? remove "GL_" and "gl" prefixes (looks like OpenGL spec)
  ? add error checking after commands (qgl.in: ERROR)
  ?? add profiling (qgl.in: PROFILE)
?? make area_t, cluster_t, area.clusterList, cluster.leafList (faster MarkLeafs()/LightPoint())
? make skins for models with 1 frame to be sh.fast==true (and implement it in AGP memory);
  Problem: how to apply lighting (use hw lights)? (and: skins may be dynamically changed from "fast" to "slow")
! triangle models: build lods
? "gl_alphaLightmap" (arc, def: "1") -- can disable lighting of alpha/warp surfaces; add option to menu
  (easy implement, but naming problems ...)
! water lightmaps: try to GENERATE vertex light for water
- improve SURF_ALPHA quality on near distances (determine const for checking this requirement?):
  - scale (enlarge) texture with keeping alpha = 0 or 255
  ? make 2 copies of image (when necessary): with and without alpha-channel (have some KP maps with same texture used
    as window and as wall) -- IMAGE_ALPHA flag (use different resampling techniques)
  ? adjust alpha-test const for surface in accordance to its average alpha (but: what to do with mipmaps code (it modifies avg alpha))
- screen blending: move this outside renderer, make with DrawFill2 (ref_soft: cannot do this, because of paletted implementation)
? gl_extensions: 0 - disable, 1 - standard only (ARB), 2 - +vendor-specific, i.e. all (NV)
